# Debian 12 (Bookworm) Configuration for Odoo
# Last Verified: 2025-10-29
# Data Sources: Official Debian documentation, PostgreSQL repositories, community guides

os_info:
  name: "Debian"
  version: "12 (Bookworm)"
  family: "Debian"
  architecture: ["amd64", "arm64", "armhf", "i386"]
  release_date: "2023-06-10"
  support_until: "2028-06-10"
  package_manager: "apt"
  init_system: "systemd"
  description: "Stable, reliable Linux distribution with extensive package repositories"

repositories:
  postgresql:
    name: "PostgreSQL Official APT Repository"
    install_command: |
      sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
      wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
      sudo apt update

  nodejs:
    name: "NodeSource Repository"
    install_command: |
      curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -

  backports:
    name: "Debian Backports"
    install_command: |
      echo "deb http://deb.debian.org/debian bookworm-backports main" | sudo tee /etc/apt/sources.list.d/backports.list
      sudo apt update

system_packages:
  development:
    - build-essential
    - git
    - vim
    - wget
    - curl
    - ca-certificates
    - gnupg
    - lsb-release
    - software-properties-common

  python:
    - python3
    - python3-pip
    - python3-dev
    - python3-venv
    - python3-wheel
    - python3-setuptools
    - python3-distutils

  libraries:
    - libxml2-dev
    - libxslt1-dev
    - libldap2-dev
    - libsasl2-dev
    - libssl-dev
    - libffi-dev
    - libjpeg62-turbo-dev
    - zlib1g-dev
    - libpq-dev
    - liblcms2-dev
    - libtiff5-dev
    - libfreetype6-dev
    - libwebp-dev
    - libopenjp2-7-dev
    - libharfbuzz-dev
    - libfribidi-dev
    - libxcb1-dev
    - libzip-dev
    - libmysqlclient-dev
    - libblas-dev
    - libatlas-base-dev
    - gfortran
    - fontconfig
    - libcairo2-dev
    - libpango1.0-dev

  postgresql:
    - postgresql-16
    - postgresql-client-16
    - postgresql-contrib-16
    - libpq-dev

  nodejs:
    - nodejs
    - npm

  additional:
    - nginx
    - certbot
    - python3-certbot-nginx
    - ufw
    - fail2ban
    - redis-server
    - memcached
    - supervisor

installation_commands:
  system_update: |
    sudo apt update
    sudo apt upgrade -y
    sudo apt dist-upgrade -y

  install_dependencies: |
    # Install essential packages
    sudo apt install -y build-essential git vim wget curl ca-certificates \
      gnupg lsb-release software-properties-common

    # Install Python 3.11 (Debian 12 default)
    sudo apt install -y python3 python3-pip python3-dev python3-venv \
      python3-wheel python3-setuptools python3-distutils

    # Install development libraries
    sudo apt install -y libxml2-dev libxslt1-dev libldap2-dev libsasl2-dev \
      libssl-dev libffi-dev libjpeg62-turbo-dev zlib1g-dev libpq-dev \
      liblcms2-dev libtiff5-dev libfreetype6-dev libwebp-dev \
      libopenjp2-7-dev libharfbuzz-dev libfribidi-dev libxcb1-dev \
      libzip-dev libmysqlclient-dev libblas-dev libatlas-base-dev \
      gfortran fontconfig libcairo2-dev libpango1.0-dev

  install_postgresql: |
    # Add PostgreSQL APT repository
    sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
    wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
    sudo apt update

    # Install PostgreSQL 16
    sudo apt install -y postgresql-16 postgresql-client-16 postgresql-contrib-16

    # Enable and start PostgreSQL
    sudo systemctl enable postgresql
    sudo systemctl start postgresql

    # Create Odoo database user
    sudo -u postgres createuser -s odoo

    # Configure PostgreSQL authentication
    sudo sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/" /etc/postgresql/16/main/postgresql.conf

  install_nodejs: |
    # Install Node.js 20 LTS
    curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
    sudo apt install -y nodejs

    # Install global Node packages
    sudo npm install -g less less-plugin-clean-css rtlcss

    # Verify installation
    node --version
    npm --version

  install_wkhtmltopdf: |
    # Install wkhtmltopdf with Qt patches
    wget https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6.1-3/wkhtmltox_0.12.6.1-3.bookworm_amd64.deb
    sudo apt install -y ./wkhtmltox_0.12.6.1-3.bookworm_amd64.deb

    # Install missing dependencies if any
    sudo apt install -f -y

  create_odoo_user: |
    # Create dedicated system user for Odoo
    sudo useradd -m -d /opt/odoo -U -r -s /bin/bash odoo

    # Create necessary directories
    sudo mkdir -p /var/log/odoo
    sudo mkdir -p /var/lib/odoo
    sudo mkdir -p /etc/odoo

    # Set permissions
    sudo chown -R odoo:odoo /var/log/odoo
    sudo chown -R odoo:odoo /var/lib/odoo
    sudo chown -R odoo:odoo /etc/odoo

  setup_python_venv: |
    # Create Python virtual environment
    sudo -u odoo python3 -m venv /opt/odoo/venv

    # Upgrade pip and install wheel
    sudo -u odoo /opt/odoo/venv/bin/pip install --upgrade pip wheel setuptools

  setup_firewall: |
    # Install and configure UFW firewall
    sudo apt install -y ufw

    # Set default policies
    sudo ufw default deny incoming
    sudo ufw default allow outgoing

    # Allow SSH (adjust port if needed)
    sudo ufw allow 22/tcp

    # Allow HTTP and HTTPS
    sudo ufw allow 80/tcp
    sudo ufw allow 443/tcp

    # Allow Odoo ports
    sudo ufw allow 8069/tcp
    sudo ufw allow 8072/tcp

    # Enable firewall
    sudo ufw --force enable

apparmor_configuration:
  mode: "enforcing"  # Debian uses AppArmor instead of SELinux
  commands: |
    # AppArmor is enabled by default in Debian
    # Check AppArmor status
    sudo aa-status

    # If Odoo has issues, create a profile or set to complain mode
    # sudo aa-complain /opt/odoo/odoo/odoo-bin

postgresql_configuration:
  version: "16"
  data_directory: "/var/lib/postgresql/16/main"
  config_file: "/etc/postgresql/16/main/postgresql.conf"
  hba_file: "/etc/postgresql/16/main/pg_hba.conf"

  tuning_parameters:
    shared_buffers: "512MB"
    effective_cache_size: "2GB"
    maintenance_work_mem: "128MB"
    checkpoint_completion_target: "0.9"
    wal_buffers: "16MB"
    default_statistics_target: "100"
    random_page_cost: "1.1"
    effective_io_concurrency: "200"
    work_mem: "4MB"
    min_wal_size: "1GB"
    max_wal_size: "4GB"
    max_connections: "200"
    max_worker_processes: "8"
    max_parallel_workers_per_gather: "4"
    max_parallel_workers: "8"
    max_parallel_maintenance_workers: "4"

  hba_config: |
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    local   all             postgres                                peer
    local   all             all                                     peer
    host    all             all             127.0.0.1/32            scram-sha-256
    host    all             all             ::1/128                 scram-sha-256
    host    all             all             0.0.0.0/0               scram-sha-256

systemd_service:
  service_file_path: "/etc/systemd/system/odoo.service"
  service_content: |
    [Unit]
    Description=Odoo ERP System
    Documentation=https://www.odoo.com/documentation
    Requires=postgresql.service
    After=network.target postgresql.service

    [Service]
    Type=simple
    SyslogIdentifier=odoo
    PermissionsStartOnly=true
    User=odoo
    Group=odoo
    ExecStart=/opt/odoo/venv/bin/python3 /opt/odoo/odoo/odoo-bin \
      --config=/etc/odoo/odoo.conf
    StandardOutput=journal+console
    Restart=on-failure
    RestartSec=5
    Nice=10
    LimitNOFILE=65536

    # Security hardening
    PrivateTmp=true
    ProtectSystem=strict
    ProtectHome=true
    ReadWritePaths=/opt/odoo /var/log/odoo /var/lib/odoo /etc/odoo
    NoNewPrivileges=true

    [Install]
    WantedBy=multi-user.target

nginx_configuration:
  config_file: "/etc/nginx/sites-available/odoo"
  sample_config: |
    # Odoo server upstream
    upstream odoo {
        server 127.0.0.1:8069;
    }

    upstream odoochat {
        server 127.0.0.1:8072;
    }

    # HTTP -> HTTPS redirect
    server {
        listen 80;
        server_name your-domain.com;

        location /.well-known/acme-challenge/ {
            root /var/www/html;
        }

        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # HTTPS server
    server {
        listen 443 ssl http2;
        server_name your-domain.com;

        # SSL configuration
        ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;

        # Modern SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # HSTS
        add_header Strict-Transport-Security "max-age=63072000" always;

        # Logging
        access_log /var/log/nginx/odoo.access.log;
        error_log /var/log/nginx/odoo.error.log;

        # Proxy settings
        client_max_body_size 100M;
        proxy_read_timeout 720s;
        proxy_connect_timeout 720s;
        proxy_send_timeout 720s;

        # Proxy headers
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $http_host;

        # Main application
        location / {
            proxy_redirect off;
            proxy_pass http://odoo;
        }

        # Long polling
        location /longpolling {
            proxy_pass http://odoochat;
        }

        # Cache static data
        location ~* /web/static/ {
            proxy_cache_valid 200 90m;
            proxy_buffering on;
            expires 864000;
            proxy_pass http://odoo;
        }

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml application/atom+xml image/svg+xml text/x-js text/x-cross-domain-policy application/x-font-ttf application/x-font-opentype application/vnd.ms-fontobject image/x-icon;
    }

supervisor_configuration:
  config_file: "/etc/supervisor/conf.d/odoo.conf"
  sample_config: |
    [program:odoo]
    command=/opt/odoo/venv/bin/python3 /opt/odoo/odoo/odoo-bin -c /etc/odoo/odoo.conf
    directory=/opt/odoo
    user=odoo
    autostart=true
    autorestart=true
    stdout_logfile=/var/log/odoo/odoo-stdout.log
    stderr_logfile=/var/log/odoo/odoo-stderr.log
    logfile_maxbytes=10MB
    logfile_backups=10
    environment=PATH="/opt/odoo/venv/bin:%(ENV_PATH)s"

troubleshooting:
  common_issues:
    - issue: "ModuleNotFoundError: No module named 'package_name'"
      solution: |
        Activate virtual environment and install missing package:
        source /opt/odoo/venv/bin/activate
        pip install package_name

    - issue: "psycopg2 installation error"
      solution: |
        Install PostgreSQL development headers:
        sudo apt install -y libpq-dev
        pip install psycopg2-binary

    - issue: "Permission denied when accessing files"
      solution: |
        Fix file ownership and permissions:
        sudo chown -R odoo:odoo /opt/odoo
        sudo chown -R odoo:odoo /var/log/odoo
        sudo chown -R odoo:odoo /var/lib/odoo

    - issue: "UFW firewall blocking connections"
      solution: |
        Check firewall status and rules:
        sudo ufw status verbose
        sudo ufw allow 8069/tcp
        sudo ufw reload

    - issue: "PostgreSQL connection refused"
      solution: |
        Check PostgreSQL is running and listening:
        sudo systemctl status postgresql
        sudo netstat -plnt | grep postgres
        Check pg_hba.conf authentication methods

    - issue: "Nginx 502 Bad Gateway"
      solution: |
        Ensure Odoo is running:
        sudo systemctl status odoo
        Check Odoo logs:
        sudo tail -f /var/log/odoo/odoo-server.log

    - issue: "Out of memory errors"
      solution: |
        Adjust Odoo worker settings in config file:
        workers = 2
        limit_memory_hard = 2684354560
        limit_memory_soft = 2147483648

performance_tuning:
  system_limits: |
    # Add to /etc/security/limits.conf
    odoo soft nofile 65536
    odoo hard nofile 65536
    odoo soft nproc 32768
    odoo hard nproc 32768

  kernel_parameters: |
    # Add to /etc/sysctl.conf
    net.ipv4.tcp_keepalive_time = 60
    net.ipv4.tcp_keepalive_intvl = 10
    net.ipv4.tcp_keepalive_probes = 6
    net.core.somaxconn = 4096
    net.ipv4.tcp_max_syn_backlog = 4096
    vm.swappiness = 10
    fs.file-max = 2097152

  apt_optimizations: |
    # Configure APT for faster downloads
    echo 'Acquire::Languages "none";' | sudo tee /etc/apt/apt.conf.d/99disable-translations
    echo 'APT::Install-Recommends "false";' | sudo tee /etc/apt/apt.conf.d/99no-recommends

compatibility_notes:
  odoo_versions:
    - version: "14"
      compatible: true
      notes: "Works with default Python 3.11"
    - version: "15"
      compatible: true
      notes: "Works with default Python 3.11"
    - version: "16"
      compatible: true
      notes: "Works with default Python 3.11"
    - version: "17"
      compatible: true
      notes: "Requires Python 3.10+, Debian 12 has Python 3.11"
    - version: "18"
      compatible: true
      notes: "Requires Python 3.10+, fully supported"

  notes: |
    - Debian 12 ships with Python 3.11 by default
    - Long-term support until 2028
    - Very stable, ideal for production environments
    - AppArmor is enabled by default (not SELinux)
    - PostgreSQL 16 requires external repository
    - Extensive package repositories available
    - Supervisor recommended for process management
    - UFW provides simpler firewall management than iptables