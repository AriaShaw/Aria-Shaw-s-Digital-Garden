# Template: Hosting Infrastructure Implementation Guide
# Template ID: hosting_infrastructure
# Intent Type: practitioner
# Coverage: 52 keywords (multi-server, high availability, load balancing, scaling, monitoring, backup, disaster recovery)
# Variables Required: {{infrastructure_type}}, {{odoo_version}}, {{scale}}, {{hosting_environment}}
# Reusable Modules: infrastructure/{{infrastructure_type}}_architecture.yml, monitoring/{{monitoring_stack}}.yml

metadata:
  title: "{{infrastructure_topic}} for Odoo {{odoo_version}}: Production Infrastructure Guide"
  description: "Implement {{infrastructure_topic}} for Odoo {{odoo_version}}. Complete guide for {{scale}}-scale deployments with high availability, monitoring, backup, and disaster recovery. Battle-tested architectures."
  intent_type: "practitioner"
  page_slug: "{{infrastructure_slug}}"
  draft_metadata:
    created_by: "pseo-bulk-generator"
    template_id: "hosting_infrastructure"
    generation_mode: "template"
    confidence_level: "high"
    notes_for_reviewer: "Verify architecture patterns match current best practices. Check tool versions compatibility."

static_data:
  # Infrastructure Context
  infrastructure_type: "{{infrastructure_type}}"  # multi-server/ha/load-balanced/auto-scaling/hybrid/edge
  odoo_version: "{{odoo_version}}"
  scale: "{{scale}}"  # small/medium/large/enterprise
  hosting_environment: "{{hosting_environment}}"  # on-premise/cloud/hybrid/kubernetes
  expected_sla: "{{sla_target}}"  # 99.9%/99.95%/99.99%

  # Architecture Overview
  architecture_design:
    deployment_pattern: "{{deployment_pattern}}"  # monolithic/microservices/serverless/container-based
    high_availability:
      enabled: "{{ha_enabled}}"
      failover_time: "{{failover_seconds}}s"
      data_redundancy: "{{redundancy_level}}"  # none/local/geo-redundant

    scalability:
      horizontal_scaling: "{{horizontal_enabled}}"
      vertical_scaling_limit: "{{max_server_size}}"
      auto_scaling: "{{autoscaling_enabled}}"
      scale_triggers: ["{{trigger_1}}", "{{trigger_2}}", "{{trigger_3}}"]

    components:
      web_tier:
        servers: "{{web_server_count}}"
        specifications: "{{web_specs}}"  # e.g., "4vCPU, 8GB RAM"
        technology: "{{web_technology}}"  # nginx/apache/caddy

      application_tier:
        servers: "{{app_server_count}}"
        specifications: "{{app_specs}}"
        worker_configuration:
          workers: "{{worker_count}}"
          threads: "{{thread_count}}"
          memory_limits: "{{memory_limit_mb}}MB"

      database_tier:
        primary_servers: "{{db_primary_count}}"
        replica_servers: "{{db_replica_count}}"
        specifications: "{{db_specs}}"
        replication_type: "{{replication_type}}"  # synchronous/asynchronous/logical

      storage_tier:
        type: "{{storage_type}}"  # local-ssd/network-attached/object-storage
        capacity: "{{storage_capacity_tb}}TB"
        iops: "{{storage_iops}}"
        backup_storage: "{{backup_storage_tb}}TB"

  # Infrastructure Implementation
  implementation_phases:
    - phase: 1
      title: "Infrastructure Planning & Design"
      duration: "3-5 days"
      tasks:
        - task: "Capacity planning"
          calculations:
            concurrent_users: "{{expected_users}}"
            database_size: "{{expected_db_gb}}GB"
            storage_growth: "{{growth_rate_monthly}}%/month"
            bandwidth_required: "{{bandwidth_gbps}}Gbps"

        - task: "Network architecture design"
          network_design:
            vpc_cidr: "{{vpc_cidr}}"
            public_subnets: ["{{public_subnet_1}}", "{{public_subnet_2}}"]
            private_subnets: ["{{private_subnet_1}}", "{{private_subnet_2}}"]
            availability_zones: "{{az_count}}"

        - task: "Security architecture"
          security_layers:
            - "WAF (Web Application Firewall)"
            - "DDoS protection"
            - "Network segmentation"
            - "Bastion hosts"
            - "VPN gateway"

        - task: "Cost estimation"
          cost_breakdown:
            compute: "${{compute_cost}}/month"
            storage: "${{storage_cost}}/month"
            bandwidth: "${{bandwidth_cost}}/month"
            backup: "${{backup_cost}}/month"
            total_estimated: "${{total_cost}}/month"

      verification: "Architecture review approved by stakeholders"

    - phase: 2
      title: "Base Infrastructure Provisioning"
      duration: "2-3 days"
      tasks:
        - task: "Provision compute resources"
          infrastructure_as_code:
            tool: "{{iac_tool}}"  # Terraform/CloudFormation/Pulumi
            modules:
              - "vpc_module"
              - "compute_module"
              - "database_module"
              - "storage_module"
          commands:
            - "terraform init"
            - "terraform plan -out=tfplan"
            - "terraform apply tfplan"

        - task: "Configure networking"
          network_setup:
            - "Create VPC with {{vpc_cidr}}"
            - "Configure subnets across {{az_count}} AZs"
            - "Set up Internet Gateway"
            - "Configure NAT Gateways"
            - "Create security groups"
            - "Set up VPC peering (if needed)"

        - task: "Set up DNS"
          dns_configuration:
            provider: "{{dns_provider}}"  # Route53/CloudFlare/Azure DNS
            records:
              - type: "A"
                name: "{{domain}}"
                value: "{{load_balancer_ip}}"
              - type: "CNAME"
                name: "www.{{domain}}"
                value: "{{domain}}"

        - task: "Configure SSL/TLS"
          ssl_setup:
            certificate_type: "{{cert_type}}"  # wildcard/san/single
            provider: "{{cert_provider}}"
            auto_renewal: "{{auto_renewal_enabled}}"

      verification: "All infrastructure components accessible and secure"

    - phase: 3
      title: "Load Balancing & High Availability"
      duration: "2-3 days"
      tasks:
        - task: "Configure load balancer"
          load_balancer_config:
            type: "{{lb_type}}"  # application/network/classic
            algorithm: "{{lb_algorithm}}"  # round-robin/least-connections/ip-hash
            health_checks:
              path: "/web/health"
              interval: "{{health_interval_seconds}}s"
              timeout: "{{health_timeout_seconds}}s"
              healthy_threshold: "{{healthy_count}}"
              unhealthy_threshold: "{{unhealthy_count}}"

          nginx_config: |
            upstream odoo_backend {
                {{lb_algorithm}};
                server app1.internal:8069 max_fails=3 fail_timeout=30s;
                server app2.internal:8069 max_fails=3 fail_timeout=30s;
                server app3.internal:8069 max_fails=3 fail_timeout=30s;
                keepalive 64;
            }

            server {
                listen 443 ssl http2;
                server_name {{domain}};

                location / {
                    proxy_pass http://odoo_backend;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header Host $http_host;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_redirect off;
                }

                location /longpolling {
                    proxy_pass http://odoo_backend;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header Host $http_host;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_buffering off;
                }
            }

        - task: "Database high availability"
          database_ha:
            primary_server: "{{db_primary}}"
            standby_servers: ["{{db_standby_1}}", "{{db_standby_2}}"]
            replication_method: "{{replication_method}}"
            failover_mechanism: "{{failover_type}}"  # automatic/manual
            connection_pooling:
              tool: "pgbouncer"
              pool_mode: "session"
              max_connections: "{{max_db_connections}}"

        - task: "Session management"
          session_config:
            storage: "{{session_storage}}"  # redis/memcached/database
            sticky_sessions: "{{sticky_enabled}}"
            session_timeout: "{{session_timeout_minutes}}min"

        - task: "File storage synchronization"
          shared_storage:
            solution: "{{storage_solution}}"  # NFS/GlusterFS/S3/Azure-Files
            mount_point: "/mnt/odoo-filestore"
            sync_mechanism: "{{sync_type}}"

      verification: "Failover test successful, zero downtime achieved"

    - phase: 4
      title: "Monitoring & Observability"
      duration: "2-3 days"
      tasks:
        - task: "Set up metrics collection"
          metrics_stack:
            collector: "{{metrics_collector}}"  # Prometheus/Telegraf/CloudWatch
            storage: "{{metrics_storage}}"
            retention: "{{metrics_retention_days}} days"
            key_metrics:
              - "CPU utilization"
              - "Memory usage"
              - "Disk I/O"
              - "Network throughput"
              - "Request latency"
              - "Error rate"
              - "Database connections"

        - task: "Configure logging"
          logging_stack:
            aggregator: "{{log_aggregator}}"  # ELK/Fluentd/CloudWatch
            storage: "{{log_storage}}"
            retention: "{{log_retention_days}} days"
            log_levels:
              application: "{{app_log_level}}"
              database: "{{db_log_level}}"
              web_server: "{{web_log_level}}"

        - task: "Set up alerting"
          alerting_rules:
            - alert: "High CPU Usage"
              condition: "cpu_usage > {{cpu_alert_threshold}}%"
              duration: "{{cpu_alert_duration}}min"
              action: "{{cpu_alert_action}}"

            - alert: "Low Disk Space"
              condition: "disk_free < {{disk_alert_threshold}}%"
              action: "{{disk_alert_action}}"

            - alert: "Database Connection Pool Exhausted"
              condition: "available_connections < {{conn_alert_threshold}}"
              action: "{{conn_alert_action}}"

            - alert: "Response Time Degradation"
              condition: "p95_latency > {{latency_alert_threshold}}ms"
              action: "{{latency_alert_action}}"

        - task: "Create dashboards"
          dashboards:
            - name: "Infrastructure Overview"
              panels: ["Server health", "Resource usage", "Network traffic"]
            - name: "Application Performance"
              panels: ["Request rate", "Response time", "Error rate"]
            - name: "Database Metrics"
              panels: ["Query performance", "Connection pool", "Replication lag"]

      verification: "All metrics visible, alerts functioning correctly"

    - phase: 5
      title: "Backup & Disaster Recovery"
      duration: "2-3 days"
      tasks:
        - task: "Implement backup strategy"
          backup_configuration:
            database_backup:
              method: "{{db_backup_method}}"  # pg_dump/streaming/snapshot
              frequency: "{{db_backup_frequency}}"
              retention: "{{db_backup_retention_days}} days"
              encryption: "{{backup_encryption_enabled}}"

            filestore_backup:
              method: "{{file_backup_method}}"  # rsync/snapshot/s3-sync
              frequency: "{{file_backup_frequency}}"
              retention: "{{file_backup_retention_days}} days"

            backup_testing:
              frequency: "{{test_frequency}}"
              restore_verification: "{{restore_verification_enabled}}"

        - task: "Configure disaster recovery"
          dr_setup:
            rto: "{{rto_hours}} hours"  # Recovery Time Objective
            rpo: "{{rpo_hours}} hours"  # Recovery Point Objective
            dr_site: "{{dr_region}}"
            replication_type: "{{dr_replication_type}}"
            failover_procedure: "{{failover_procedure_documented}}"

        - task: "Create runbooks"
          runbook_topics:
            - "Failover procedure"
            - "Backup restoration"
            - "Scaling procedures"
            - "Security incident response"
            - "Performance troubleshooting"

      verification: "Successful DR drill completed"

    - phase: 6
      title: "Auto-Scaling & Optimization"
      duration: "1-2 days"
      tasks:
        - task: "Configure auto-scaling"
          autoscaling_config:
            min_instances: "{{min_instances}}"
            max_instances: "{{max_instances}}"
            target_metric: "{{scaling_metric}}"  # CPU/memory/requests
            target_value: "{{scaling_target_value}}"
            scale_up_cooldown: "{{scale_up_cooldown_seconds}}s"
            scale_down_cooldown: "{{scale_down_cooldown_seconds}}s"

        - task: "Optimize resource allocation"
          optimization_areas:
            - area: "Right-sizing instances"
              current: "{{current_instance_type}}"
              recommended: "{{recommended_instance_type}}"
              savings: "{{instance_savings_percent}}%"

            - area: "Reserved capacity"
              commitment: "{{reservation_term}}"
              savings: "{{reservation_savings_percent}}%"

            - area: "Spot/preemptible instances"
              suitable_for: ["Development", "Testing", "Batch jobs"]
              savings: "{{spot_savings_percent}}%"

        - task: "Performance tuning"
          tuning_parameters:
            kernel:
              vm_swappiness: "{{swappiness}}"
              tcp_keepalive_time: "{{keepalive_time}}"
              somaxconn: "{{somaxconn}}"

            application:
              worker_processes: "{{worker_processes}}"
              worker_connections: "{{worker_connections}}"
              keepalive_timeout: "{{keepalive_timeout}}"

      verification: "Auto-scaling tested under load"

    - phase: 7
      title: "Security Hardening"
      duration: "2-3 days"
      tasks:
        - task: "Network security"
          security_measures:
            - "Configure WAF rules"
            - "Enable DDoS protection"
            - "Set up VPN for admin access"
            - "Implement network segmentation"
            - "Configure intrusion detection"

        - task: "Access control"
          access_management:
            - "Implement IAM policies"
            - "Enable MFA for all admin accounts"
            - "Set up bastion hosts"
            - "Configure audit logging"
            - "Implement secret management"

        - task: "Compliance setup"
          compliance_controls:
            - standard: "{{compliance_standard}}"
              controls_implemented: "{{controls_count}}"
              audit_frequency: "{{audit_frequency}}"

      verification: "Security audit passed"

    - phase: 8
      title: "Documentation & Training"
      duration: "1-2 days"
      tasks:
        - task: "Create documentation"
          documentation_deliverables:
            - "Architecture diagrams"
            - "Network topology"
            - "Deployment procedures"
            - "Operational runbooks"
            - "Troubleshooting guides"
            - "Security policies"

        - task: "Team training"
          training_topics:
            - "Infrastructure overview"
            - "Monitoring and alerting"
            - "Backup procedures"
            - "Scaling operations"
            - "Incident response"

      verification: "Team successfully operates infrastructure"

  # Infrastructure Components Details
  infrastructure_components:
    compute:
      web_servers:
        count: "{{web_count}}"
        type: "{{web_instance_type}}"
        os: "{{web_os}}"
        configuration: "{{web_config}}"

      app_servers:
        count: "{{app_count}}"
        type: "{{app_instance_type}}"
        os: "{{app_os}}"
        odoo_version: "{{odoo_version}}"

      database_servers:
        count: "{{db_count}}"
        type: "{{db_instance_type}}"
        engine: "PostgreSQL {{postgresql_version}}"
        high_availability: "{{db_ha_enabled}}"

    networking:
      load_balancers:
        type: "{{lb_type}}"
        count: "{{lb_count}}"
        ssl_termination: "{{ssl_termination_enabled}}"

      cdn:
        provider: "{{cdn_provider}}"
        edge_locations: "{{edge_location_count}}"
        cache_behavior: "{{cache_behavior}}"

      vpn:
        type: "{{vpn_type}}"
        users: "{{vpn_user_count}}"
        mfa_required: "{{vpn_mfa}}"

    storage:
      primary_storage:
        type: "{{primary_storage_type}}"
        size: "{{primary_storage_size}}"
        iops: "{{primary_iops}}"
        encryption: "{{storage_encryption}}"

      backup_storage:
        type: "{{backup_storage_type}}"
        size: "{{backup_storage_size}}"
        retention: "{{backup_retention}}"
        geo_redundancy: "{{geo_redundancy}}"

    monitoring:
      metrics:
        solution: "{{metrics_solution}}"
        retention: "{{metrics_retention}}"
        custom_metrics: "{{custom_metrics_count}}"

      logs:
        solution: "{{log_solution}}"
        retention: "{{log_retention}}"
        index_size: "{{log_index_size}}"

      apm:
        solution: "{{apm_solution}}"
        transaction_sampling: "{{sampling_rate}}%"

  # Operational Procedures
  operational_procedures:
    maintenance:
      patching_schedule: "{{patching_schedule}}"
      maintenance_window: "{{maintenance_window}}"
      rollback_procedure: "{{rollback_documented}}"

    scaling:
      horizontal_scaling_procedure: "{{h_scaling_procedure}}"
      vertical_scaling_procedure: "{{v_scaling_procedure}}"
      capacity_planning_review: "{{capacity_review_frequency}}"

    incident_management:
      severity_levels: ["Critical", "High", "Medium", "Low"]
      escalation_path: "{{escalation_path}}"
      communication_channels: ["{{channel_1}}", "{{channel_2}}"]
      post_mortem_requirement: "{{postmortem_requirement}}"

  # Cost Optimization
  cost_management:
    current_monthly_cost: "${{current_cost}}"
    optimized_monthly_cost: "${{optimized_cost}}"
    savings_opportunities:
      - opportunity: "Reserved instances"
        potential_savings: "${{ri_savings}}/month"
      - opportunity: "Spot instances for non-critical"
        potential_savings: "${{spot_savings}}/month"
      - opportunity: "Right-sizing"
        potential_savings: "${{rightsizing_savings}}/month"

    cost_allocation:
      compute: "{{compute_percent}}%"
      storage: "{{storage_percent}}%"
      network: "{{network_percent}}%"
      backup: "{{backup_percent}}%"
      monitoring: "{{monitoring_percent}}%"

  # Performance Benchmarks
  performance_targets:
    availability: "{{availability_target}}%"
    response_time_p50: "{{p50_target}}ms"
    response_time_p95: "{{p95_target}}ms"
    response_time_p99: "{{p99_target}}ms"
    error_rate: "< {{error_rate_target}}%"
    throughput: "> {{throughput_target}} req/s"

# AI-generated content sections (filled by enrichment pipeline)
ai_generated_content:
  introduction: ""
  deployment_guide: ""  # Main infrastructure guide content (standard field for deployment)
  troubleshooting_guide: ""
  conclusion: ""

# Conversion assets (filled by pseo-conversion-copywriter)
conversion_assets:
  - component_type: "callout-box"
    placement_hint: "mid_guide"
    generated_copy: {}

  - component_type: "hero-section"
    placement_hint: "post_technical"
    generated_copy: {}

  - component_type: "product-box"
    placement_hint: "pre_conclusion"
    generated_copy: {}

# Intelligent internal links (filled by pseo-link-architect)
intelligent_links:
  - link_type: "related-infrastructure"
    placement: "in-content"
    generated_link: {}

  - link_type: "monitoring-guide"
    placement: "after-monitoring"
    generated_link: {}

  - link_type: "disaster-recovery-tool"
    placement: "footer"
    generated_link: {}

# Visualizations (filled by pseo-visualization-agent)
visualizations:
  - chart_type: "mermaid"
    title: "Infrastructure Architecture Diagram"
    placement_hint: "after_introduction"
    mermaid_chart_syntax: ""

  - chart_type: "mermaid"
    title: "Network Topology"
    placement_hint: "after_steps"
    mermaid_chart_syntax: ""

  - chart_type: "mermaid"
    title: "Cost Breakdown"
    placement_hint: "after_cost_analysis_section"
    mermaid_chart_syntax: ""