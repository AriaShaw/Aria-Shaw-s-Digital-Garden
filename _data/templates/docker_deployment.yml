# Template: Docker Deployment Guide
# Template ID: docker_deployment
# Intent Type: practitioner
# Coverage: 30+ keywords (docker, docker-compose, containerization, orchestration)
# Variables Required: {{odoo_version}}, {{deployment_environment}}, {{container_registry}}, {{scaling_strategy}}
# Reusable Modules: odoo_versions/odoo_{{odoo_version}}.yml, containers/docker_configs.yml

metadata:
  title: "Odoo {{odoo_version}} Docker Deployment: Production-Ready Container Guide"
  description: "Deploy Odoo {{odoo_version}} with Docker in {{deployment_environment}} environment. Complete guide with docker-compose, scaling, monitoring, backup strategies, and security best practices."
  intent_type: "practitioner"
  page_slug: "odoo-{{odoo_version}}-docker-{{deployment_environment}}"
  draft_metadata:
    created_by: "pseo-bulk-generator"
    template_id: "docker_deployment"
    generation_mode: "template"
    confidence_level: "high"
    notes_for_reviewer: "Verify Docker image versions and compose syntax. Ensure security recommendations are current."

static_data:
  # Deployment Context
  odoo_version: "{{odoo_version}}"  # 14/15/16/17/18
  deployment_environment: "{{deployment_environment}}"  # development/staging/production
  container_registry: "{{container_registry}}"  # docker.io/ghcr.io/ecr/gcr/acr
  scaling_strategy: "{{scaling_strategy}}"  # single/replicated/distributed

  # Container Architecture
  container_architecture:
    base_image: "odoo:{{odoo_version}}"
    python_version: "{{python_version}}"  # Based on odoo version
    postgres_version: "16-alpine"
    redis_version: "7-alpine"
    nginx_version: "alpine"

    services:
      - service: "odoo-app"
        container: "{{registry_url}}/odoo:{{odoo_version}}-{{build_tag}}"
        replicas: "{{app_replicas}}"
        resources:
          cpu: "{{cpu_limit}}"
          memory: "{{memory_limit}}"

      - service: "postgres-db"
        container: "postgres:16-alpine"
        replicas: "1"
        volume_size: "{{db_volume_size}}"

      - service: "redis-cache"
        container: "redis:7-alpine"
        replicas: "1"
        persistence: "{{redis_persistence}}"

  # Docker Compose Configuration
  compose_structure:
    version: "3.8"
    networks:
      - name: "frontend"
        driver: "bridge"
        internal: false
      - name: "backend"
        driver: "bridge"
        internal: true

    volumes:
      - name: "odoo-data"
        driver: "local"
        path: "{{data_path}}/odoo"
      - name: "postgres-data"
        driver: "local"
        path: "{{data_path}}/postgres"

    environment_files:
      - ".env"
      - ".env.{{deployment_environment}}"

  # Deployment Steps
  deployment_steps:
    - step: 1
      title: "Prepare Docker Environment"
      actions:
        - action: "Install Docker and Docker Compose"
          command: "curl -fsSL https://get.docker.com | sh"
        - action: "Configure Docker daemon"
          config_path: "/etc/docker/daemon.json"
        - action: "Set up container registry authentication"
          command: "docker login {{container_registry}}"

    - step: 2
      title: "Build Custom Odoo Image"
      dockerfile_location: "./docker/Dockerfile"
      build_args:
        - "ODOO_VERSION={{odoo_version}}"
        - "CUSTOM_ADDONS={{custom_addons_path}}"
      build_command: "docker build -t {{registry_url}}/odoo:{{odoo_version}}-custom ."

    - step: 3
      title: "Configure Environment"
      environment_variables:
        - var: "DB_HOST"
          value: "postgres"
          description: "PostgreSQL hostname"
        - var: "DB_PORT"
          value: "5432"
          description: "PostgreSQL port"
        - var: "DB_USER"
          value: "{{db_user}}"
          description: "Database user"
        - var: "DB_PASSWORD"
          value: "{{db_password_secret}}"
          description: "Database password (use secrets in production)"

    - step: 4
      title: "Deploy with Docker Compose"
      commands:
        - "docker-compose -f docker-compose.yml -f docker-compose.{{deployment_environment}}.yml up -d"
        - "docker-compose ps"
        - "docker-compose logs -f odoo"

  # Performance Optimization
  optimization_settings:
    docker_limits:
      shm_size: "256m"
      ulimits:
        nofile: "65536:65536"
        nproc: "32768:32768"

    postgres_tuning:
      shared_buffers: "{{shared_buffers_size}}"
      work_mem: "{{work_mem_size}}"
      maintenance_work_mem: "{{maintenance_work_mem}}"
      max_connections: "{{max_connections}}"

    odoo_workers:
      workers: "{{worker_count}}"  # CPU cores * 2 + 1
      max_cron_threads: "{{cron_threads}}"
      limit_memory_soft: "{{soft_memory_limit}}"
      limit_memory_hard: "{{hard_memory_limit}}"

  # Security Hardening
  security_measures:
    - measure: "Non-root user execution"
      implementation: "USER odoo"
      dockerfile_snippet: |
        RUN useradd -m -d /opt/odoo -U -r -s /bin/bash odoo
        USER odoo

    - measure: "Read-only root filesystem"
      compose_config: "read_only: true"
      writable_paths: ["/tmp", "/var/log/odoo"]

    - measure: "Secrets management"
      method: "Docker secrets"
      example: "docker secret create db_password ./secrets/db_password.txt"

    - measure: "Network isolation"
      implementation: "Internal networks for backend services"

  # Monitoring and Logging
  monitoring_stack:
    metrics:
      - tool: "Prometheus"
        endpoint: "/metrics"
        scrape_interval: "15s"

      - tool: "cAdvisor"
        purpose: "Container metrics"
        port: "8080"

    logging:
      driver: "json-file"
      options:
        max_size: "10m"
        max_file: "3"
        labels: "environment,service"

    health_checks:
      odoo_health:
        test: "curl -f http://localhost:8069/web/health || exit 1"
        interval: "30s"
        timeout: "3s"
        retries: "3"

ai_generated_content:
  introduction: ""

  # Main deployment guide - standard field
  deployment_guide: ""

  # Step-by-step Docker setup - standard field
  step_by_step_guide: ""

  # Production deployment - standard field
  implementation_guide: ""

  # Troubleshooting - standard field
  troubleshooting_guide: ""

  # Security hardening - standard field
  security_guide: ""

  # Performance optimization - standard field
  optimization_guide: ""

  conclusion: ""

intelligent_links:
  - link_text: "Docker Compose Examples"
    relevance_score: 0.95
    intent_match: "technical"
    placement_hint: "mid_guide"
    generated_link: ""

  - link_text: "Container Security Best Practices"
    relevance_score: 0.90
    intent_match: "security"
    placement_hint: "post_security"
    generated_link: ""

  - link_text: "Kubernetes Migration Guide"
    relevance_score: 0.85
    intent_match: "advanced"
    placement_hint: "post_content"
    generated_link: ""

conversion_assets:
  - asset_id: "docker_hero"
    component_type: "hero-section"
    headline: "Deploy Odoo {{odoo_version}} with Docker"
    subheadline: "Production-ready containerization in minutes"
    cta_text: "Download Docker Templates"
    cta_link: "#docker-templates"
    placement_hint: "above_fold"
    generated_copy: ""

  - asset_id: "compose_download"
    component_type: "callout-box"
    headline: "Get Production Docker Compose"
    body: "Download our battle-tested configuration with SSL, monitoring, and auto-backups"
    cta_text: "Download Compose Files"
    cta_link: "/resources/docker-compose-{{odoo_version}}"
    placement_hint: "mid_guide"
    style: "info"
    generated_copy: ""

  - asset_id: "docker_benefits"
    component_type: "benefit-list"
    headline: "Why Docker for Odoo?"
    benefits:
      - "Consistent environments across dev/staging/prod"
      - "Quick deployment and rollback"
      - "Efficient resource utilization"
      - "Easy horizontal scaling"
      - "Simplified backup and recovery"
    placement_hint: "post_technical"
    generated_copy: ""

  - asset_id: "support_cta"
    component_type: "cta-button"
    text: "Get Docker Support"
    link: "/docker-support"
    style: "primary"
    placement_hint: "pre_conclusion"
    generated_copy: ""

code_examples:
  - example_id: "production_dockerfile"
    title: "Production Dockerfile"
    language: "dockerfile"
    code: |
      FROM odoo:{{odoo_version}}
      USER root

      # Install additional dependencies
      RUN apt-get update && apt-get install -y \
          python3-dev build-essential \
          && rm -rf /var/lib/apt/lists/*

      # Copy custom addons
      COPY ./custom_addons /mnt/extra-addons
      RUN chown -R odoo:odoo /mnt/extra-addons

      USER odoo
      EXPOSE 8069 8072

  - example_id: "docker_compose_production"
    title: "Production Docker Compose"
    language: "yaml"
    code: |
      version: '3.8'
      services:
        odoo:
          image: {{registry_url}}/odoo:{{odoo_version}}
          depends_on:
            - db
            - redis
          environment:
            - HOST=db
            - USER={{db_user}}
            - PASSWORD_FILE=/run/secrets/db_password
          volumes:
            - odoo-data:/var/lib/odoo
            - ./config:/etc/odoo:ro
          networks:
            - frontend
            - backend
          deploy:
            replicas: {{app_replicas}}
            restart_policy:
              condition: unless-stopped

related_keywords:
  primary:
    - "odoo {{odoo_version}} docker"
    - "odoo docker compose"
    - "odoo containerization"

  secondary:
    - "odoo docker {{deployment_environment}}"
    - "odoo docker scaling"
    - "odoo docker monitoring"

  long_tail:
    - "how to deploy odoo {{odoo_version}} with docker in {{deployment_environment}}"
    - "odoo {{odoo_version}} docker compose production setup"
    - "odoo docker performance optimization guide"