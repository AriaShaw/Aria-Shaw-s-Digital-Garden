# Template: Development Guide
# Template ID: development
# Intent Type: practitioner
# Coverage: 82 keywords (custom module, API, frontend, backend, reports, dashboards, OWL framework)
# Variables Required: {{development_type}}, {{odoo_version}}, {{development_topic}}, {{complexity_level}}
# Reusable Modules: odoo_versions/odoo_{{odoo_version}}.yml, development/{{development_type}}_patterns.yml

metadata:
  title: "{{development_topic}} in Odoo {{odoo_version}}: Complete Developer Guide"
  description: "Master {{development_topic}} in Odoo {{odoo_version}}. Includes code examples, best practices, architecture patterns, and production-ready implementations. From setup to deployment."
  intent_type: "practitioner"
  page_slug: "{{development_slug}}"
  draft_metadata:
    created_by: "pseo-bulk-generator"
    template_id: "development"
    generation_mode: "template"
    confidence_level: "high"
    notes_for_reviewer: "Verify code examples match Odoo {{odoo_version}} API. Check for deprecated methods."

static_data:
  # Development Context
  development_type: "{{development_type}}"  # module/api/frontend/backend/report/dashboard/integration
  odoo_version: "{{odoo_version}}"
  complexity_level: "{{complexity_level}}"  # beginner/intermediate/advanced
  estimated_hours: "{{estimated_hours}}"    # 4-8/16-32/40+

  # Technical Requirements
  technical_stack:
    primary_language: "{{primary_language}}"  # python/javascript/owl
    odoo_framework: "{{framework_component}}"  # models/views/controllers/widgets
    required_modules:
      - module: "base"
        purpose: "Core Odoo functionality"
      - module: "{{dependent_module_1}}"
        purpose: "{{module_1_purpose}}"
      - module: "{{dependent_module_2}}"
        purpose: "{{module_2_purpose}}"

    development_tools:
      - tool: "{{ide_recommendation}}"
        purpose: "Code editing and debugging"
        configuration: "{{ide_config_snippet}}"
      - tool: "Odoo Shell"
        purpose: "Interactive development"
        usage: "odoo shell -d {{database_name}}"
      - tool: "{{debugging_tool}}"
        purpose: "{{debugging_purpose}}"

  # Architecture Patterns
  architecture_design:
    pattern_type: "{{pattern_type}}"  # MVC/Service Layer/Repository/Factory
    layer_separation:
      models_layer:
        responsibility: "Business logic and data persistence"
        key_classes: ["{{model_class_1}}", "{{model_class_2}}"]
      views_layer:
        responsibility: "User interface definition"
        view_types: ["{{view_type_1}}", "{{view_type_2}}"]
      controllers_layer:
        responsibility: "HTTP request handling"
        endpoints: ["{{endpoint_1}}", "{{endpoint_2}}"]

    security_considerations:
      access_control: "{{access_control_method}}"  # ACL/Record Rules/Groups
      data_validation: "{{validation_approach}}"
      sql_injection_prevention: "{{sql_safety_method}}"

  # Step-by-Step Implementation
  implementation_steps:
    - step: 1
      title: "Development Environment Setup"
      substeps:
        - action: "Install Odoo {{odoo_version}} in development mode"
          command: "pip install -e ./odoo"
        - action: "Create addon directory structure"
          command: "odoo scaffold {{module_name}} ./addons/"
        - action: "Configure IDE for Odoo development"
          details: "{{ide_setup_details}}"
      verification: "odoo --version && ls -la addons/{{module_name}}"

    - step: 2
      title: "Define Data Models"
      substeps:
        - action: "Create model class"
          code_structure: |
            models/
            ├── __init__.py
            └── {{model_filename}}.py
        - action: "Define model fields and methods"
          key_concepts: ["_name", "_inherit", "fields.Char", "api.depends"]
        - action: "Set up database constraints"
          constraint_types: ["_sql_constraints", "api.constrains"]
      verification: "Check model in Settings > Technical > Database Structure > Models"

    - step: 3
      title: "Create User Interface"
      substeps:
        - action: "Define XML views"
          view_components: ["tree", "form", "search", "kanban"]
        - action: "Create menu items and actions"
          menu_hierarchy: "{{menu_structure}}"
        - action: "Add client-side logic (if frontend)"
          frontend_framework: "{{frontend_framework}}"  # OWL/Widget/QWeb
      verification: "Navigate to module menu, test all views"

    - step: 4
      title: "Implement Business Logic"
      substeps:
        - action: "Write computed fields"
          decorators: ["api.depends", "api.onchange"]
        - action: "Create workflow methods"
          patterns: ["state machine", "approval flow"]
        - action: "Add automated actions"
          triggers: ["on_create", "on_write", "on_unlink"]
      verification: "Unit tests pass: python -m pytest addons/{{module_name}}/tests"

    - step: 5
      title: "Security & Access Control"
      substeps:
        - action: "Define access rights (ir.model.access.csv)"
          permission_model: "CRUD per group"
        - action: "Create record rules"
          domain_filters: "{{record_rule_example}}"
        - action: "Set field-level security"
          field_groups: "{{field_security_example}}"
      verification: "Test with different user roles"

    - step: 6
      title: "Testing & Quality Assurance"
      substeps:
        - action: "Write unit tests"
          test_framework: "Odoo Test Framework"
          coverage_target: "80%+"
        - action: "Perform integration testing"
          test_scenarios: ["{{test_scenario_1}}", "{{test_scenario_2}}"]
        - action: "Code review checklist"
          review_points: ["PEP8", "SQL injection", "Performance"]
      verification: "odoo-bin -d test_db -i {{module_name}} --test-enable"

    - step: 7
      title: "Performance Optimization"
      substeps:
        - action: "Optimize database queries"
          techniques: ["prefetch", "read_group", "SQL views"]
        - action: "Implement caching strategies"
          cache_types: ["ormcache", "tools.cache"]
        - action: "Minimize RPC calls (frontend)"
          patterns: ["batch operations", "lazy loading"]
      verification: "Profile with --log-sql and browser DevTools"

    - step: 8
      title: "Documentation & Deployment"
      substeps:
        - action: "Write technical documentation"
          sections: ["API reference", "Configuration guide", "Troubleshooting"]
        - action: "Create user manual"
          format: "RST/Markdown with screenshots"
        - action: "Package for production"
          checklist: ["Version tagging", "Dependency check", "Migration scripts"]
      verification: "Documentation builds without warnings"

  # Code Patterns & Examples
  code_patterns:
    pattern_1:
      name: "{{pattern_1_name}}"
      use_case: "{{pattern_1_use_case}}"
      module_reference: "{{pattern_1_file}}"
      # Implementation details should be loaded from development/{{pattern_1_file}}.yml
      # during content assembly, not stored as static data

    pattern_2:
      name: "{{pattern_2_name}}"
      use_case: "{{pattern_2_use_case}}"
      module_reference: "{{pattern_2_file}}"
      # Implementation details should be loaded from development/{{pattern_2_file}}.yml
      # during content assembly, not stored as static data

    pattern_3:
      name: "{{pattern_3_name}}"
      use_case: "{{pattern_3_use_case}}"
      module_reference: "{{pattern_3_file}}"
      # Implementation details should be loaded from development/{{pattern_3_file}}.yml
      # during content assembly, not stored as static data

  # Common Pitfalls & Solutions
  common_pitfalls:
    - pitfall: "{{pitfall_1}}"
      symptoms: ["{{symptom_1_1}}", "{{symptom_1_2}}"]
      root_cause: "{{root_cause_1}}"
      solution: "{{solution_1}}"
      prevention: "{{prevention_1}}"

    - pitfall: "{{pitfall_2}}"
      symptoms: ["{{symptom_2_1}}", "{{symptom_2_2}}"]
      root_cause: "{{root_cause_2}}"
      solution: "{{solution_2}}"
      prevention: "{{prevention_2}}"

    - pitfall: "{{pitfall_3}}"
      symptoms: ["{{symptom_3_1}}", "{{symptom_3_2}}"]
      root_cause: "{{root_cause_3}}"
      solution: "{{solution_3}}"
      prevention: "{{prevention_3}}"

  # Performance Benchmarks
  performance_metrics:
    response_time:
      acceptable: "< {{acceptable_ms}}ms"
      optimal: "< {{optimal_ms}}ms"
      measurement_method: "{{measurement_tool}}"

    database_queries:
      acceptable: "< {{acceptable_queries}} queries/request"
      optimal: "< {{optimal_queries}} queries/request"
      monitoring_tool: "--log-sql parameter"

    memory_usage:
      acceptable: "< {{acceptable_mb}}MB"
      optimal: "< {{optimal_mb}}MB"
      profiling_tool: "memory_profiler"

  # Best Practices Checklist
  best_practices:
    code_quality:
      - practice: "Follow PEP 8 style guide"
        verification: "pylint score > 8.0"
      - practice: "Use type hints (Python 3.6+)"
        example: "def compute_total(self) -> float:"
      - practice: "Write docstrings for all public methods"
        format: "Google style docstrings"

    security:
      - practice: "Never use raw SQL, use ORM"
        exception: "Only with proper parameter binding"
      - practice: "Validate all user inputs"
        method: "@api.constrains decorators"
      - practice: "Use CSRF tokens for forms"
        implementation: "Automatic in Odoo forms"

    maintainability:
      - practice: "Keep modules focused (Single Responsibility)"
        metric: "< 2000 lines per module"
      - practice: "Use inheritance over modification"
        pattern: "_inherit vs _name"
      - practice: "Version your API changes"
        method: "API versioning in controllers"

  # Integration Points
  integration_capabilities:
    internal_apis:
      - api: "ORM API"
        operations: ["create", "write", "search", "unlink"]
        authentication: "Session-based"
      - api: "RPC API"
        protocols: ["JSON-RPC", "XML-RPC"]
        use_case: "External system integration"

    external_apis:
      - api: "REST API (custom)"
        implementation: "@http.route decorators"
        authentication: ["API keys", "OAuth2"]
      - api: "Webhook support"
        events: ["record.create", "record.write", "workflow.transition"]

    data_formats:
      import_formats: ["CSV", "Excel", "XML", "JSON"]
      export_formats: ["CSV", "Excel", "PDF", "XML"]
      transformation: "ETL capabilities via import/export framework"

  # Debugging & Troubleshooting
  debugging_guide:
    development_mode:
      enable_debug: "?debug=1 or Settings > Developer mode"
      features: ["Field technical names", "View metadata", "Server logs"]

    logging_configuration:
      log_level: "--log-level={{log_level}}"
      log_modules: "--log-handler={{module_name}}:DEBUG"
      output: "--logfile=/var/log/odoo/development.log"

    debugging_tools:
      - tool: "Python debugger (pdb)"
        usage: "import pdb; pdb.set_trace()"
      - tool: "Odoo Shell"
        usage: "odoo shell -d {{database}} --addons-path={{path}}"
      - tool: "Browser DevTools"
        features: ["Network tab", "Console errors", "Vue/React devtools"]

  # Version Compatibility Matrix
  compatibility:
    odoo_version_range: "{{min_version}} - {{max_version}}"
    python_version: "{{python_version_requirement}}"
    postgresql_version: "{{postgresql_version_requirement}}"
    browser_support:
      - browser: "Chrome"
        min_version: "{{chrome_min}}"
      - browser: "Firefox"
        min_version: "{{firefox_min}}"
      - browser: "Safari"
        min_version: "{{safari_min}}"

# AI-generated content sections (filled by enrichment pipeline)
ai_generated_content:
  introduction: ""
  step_by_step_guide: ""  # Main development guide content (standard field)
  troubleshooting_guide: ""
  conclusion: ""

# Conversion assets (filled by pseo-conversion-copywriter)
conversion_assets:
  - component_type: "callout-box"
    placement_hint: "mid_guide"
    generated_copy: {}

  - component_type: "product-box"
    placement_hint: "post_technical"
    generated_copy: {}

  - component_type: "benefit-list"
    placement_hint: "pre_conclusion"
    generated_copy: {}

# Intelligent internal links (filled by pseo-link-architect)
intelligent_links:
  - link_type: "related-development"
    placement: "in-content"
    generated_link: {}

  - link_type: "tool-recommendation"
    placement: "after-performance"
    generated_link: {}

  - link_type: "advanced-topic"
    placement: "footer"
    generated_link: {}

# Visualizations (filled by pseo-visualization-agent)
visualizations:
  - chart_type: "mermaid"
    title: "Module Architecture Diagram"
    placement_hint: "after_steps"
    mermaid_chart_syntax: ""

  - chart_type: "mermaid"
    title: "Development Workflow"
    placement_hint: "after_troubleshooting"
    mermaid_chart_syntax: ""