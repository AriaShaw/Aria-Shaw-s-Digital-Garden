metadata:
  title: 'Deploy Odoo 18 on vultr: Complete 2025 Guide'
  description: Step-by-step guide to deploy Odoo 18 on vultr vx1. Includes server
    setup, PostgreSQL configuration, NGINX reverse proxy, and SSL. Production-ready
    deployment in 30 minutes.
  intent_type: practitioner
  page_slug: deploy-odoo-18-on-vultr
  draft_metadata:
    created_by: pseo-bulk-generator
    template_id: cloud_deployment
    generation_mode: template
    confidence_level: high
    notes_for_reviewer: Template-based generation using verified cloud provider and
      Odoo version modules. Review instance recommendations for accuracy.
    template_generated: true
    template_generation_date: '2025-10-28T19:32:18.353298'
static_data:
  provider_name: Vultr
  odoo_version: Odoo 18
  recommended_instance:
    instance_type: vx1
    use_case: production
  deployment_architecture: single_server
  size_category: medium
  deployment_steps:
  - step: 1
    title: Create vultr Account and Instance
    commands:
    - '# Log into vultr dashboard'
    - '# Create new instance: vx1'
    - '# Select Ubuntu 24.04 LTS as operating system'
    - '# Choose your preferred data center region'
    - '# Set root password and add SSH key'
  - step: 2
    title: Connect to Server and Update System
    commands:
    - ssh root@YOUR_SERVER_IP
    - apt update && apt upgrade -y
    - hostnamectl set-hostname odoo-vultr
  - step: 3
    title: Install PostgreSQL 15
    commands:
    - apt install -y postgresql-15
    - sudo -u postgres createuser -s odoo
    - sudo -u postgres createdb odoo --owner=odoo
  - step: 4
    title: Install Odoo 18 Dependencies
    commands:
    - sudo apt install -y python3.11 python3-pip python3-dev libxml2-dev libxslt1-dev
      libevent-dev libsasl2-dev libldap2-dev pkg-config libtiff5-dev libjpeg8-dev
      libopenjp2-7-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev libharfbuzz-dev
      libfribidi-dev libxcb1-dev libpq-dev git
  - step: 5
    title: Install wkhtmltopdf (PDF Generation)
    commands:
    - sudo wget https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6.1-2/wkhtmltox_0.12.6.1-2.noble_amd64.deb
      && sudo dpkg -i wkhtmltox_0.12.6.1-2.noble_amd64.deb
  - step: 6
    title: Create Odoo System User
    commands:
    - sudo adduser --system --home=/opt/odoo --group odoo
  - step: 7
    title: Clone Odoo 18 from GitHub
    commands:
    - sudo su - odoo -s /bin/bash && git clone https://www.github.com/odoo/odoo --depth
      1 --branch 18.0 /opt/odoo/odoo18
  - step: 8
    title: Install Python Dependencies
    commands:
    - pip3 install -r /opt/odoo/odoo18/requirements.txt
  - step: 9
    title: Configure Odoo (odoo.conf)
    commands:
    - sudo nano /etc/odoo/odoo.conf
    config_snippet: '[options]

      admin_passwd = YOUR_MASTER_PASSWORD_HERE

      db_host = False

      db_port = False

      db_user = odoo

      db_password = False

      addons_path = /opt/odoo/odoo18/addons

      logfile = /var/log/odoo/odoo-server.log

      xmlrpc_port = 8069

      workers = {{CALCULATE:(vcpu * 2) + 1}}

      proxy_mode = True

      '
  - step: 10
    title: Create Systemd Service for Odoo
    commands:
    - sudo nano /etc/systemd/system/odoo.service
    service_snippet: '[Unit]

      Description=Odoo 18

      After=network.target postgresql.service


      [Service]

      Type=simple

      User=odoo

      Group=odoo

      ExecStart=/opt/odoo/odoo18/odoo-bin -c /etc/odoo/odoo.conf


      [Install]

      WantedBy=multi-user.target

      '
  - step: 11
    title: Install and Configure NGINX Reverse Proxy
    commands:
    - "# Upstream Odoo\nupstream odoo {\n  server 127.0.0.1:8069;\n}\n\nupstream odoo_chat\
      \ {\n  server 127.0.0.1:8072;\n}\n\n# HTTP to HTTPS Redirect\nserver {\n  listen\
      \ 80;\n  server_name odoo.example.com;\n  return 301 https://$host$request_uri;\n\
      }\n\n# HTTPS Server\nserver {\n  listen 443 ssl http2;\n  server_name odoo.example.com;\n\
      \n  # SSL Configuration\n  ssl_certificate /etc/letsencrypt/live/odoo.example.com/fullchain.pem;\n\
      \  ssl_certificate_key /etc/letsencrypt/live/odoo.example.com/privkey.pem;\n\
      \  ssl_session_timeout 30m;\n  ssl_protocols TLSv1.2 TLSv1.3;\n  ssl_ciphers\
      \ HIGH:!aNULL:!MD5;\n  ssl_prefer_server_ciphers off;\n\n  # Logging\n  access_log\
      \ /var/log/nginx/odoo.access.log;\n  error_log /var/log/nginx/odoo.error.log;\n\
      \n  # Security Headers\n  add_header X-Frame-Options SAMEORIGIN always;\n  add_header\
      \ X-Content-Type-Options nosniff always;\n  add_header X-XSS-Protection \"1;\
      \ mode=block\" always;\n  add_header Strict-Transport-Security \"max-age=31536000;\
      \ includeSubDomains\" always;\n\n  # Proxy Settings\n  proxy_read_timeout 720s;\n\
      \  proxy_connect_timeout 720s;\n  proxy_send_timeout 720s;\n  proxy_set_header\
      \ X-Forwarded-Host $host;\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\
      \  proxy_set_header X-Forwarded-Proto $scheme;\n  proxy_set_header X-Real-IP\
      \ $remote_addr;\n  proxy_set_header Host $http_host;\n  proxy_redirect off;\n\
      \n  # File Upload Size\n  client_max_body_size 256M;\n\n  # Proxy Buffers\n\
      \  proxy_buffers 16 64k;\n  proxy_buffer_size 128k;\n\n  # Gzip\n  gzip on;\n\
      \  gzip_types text/css text/scss text/plain text/xml application/xml application/json\
      \ application/javascript;\n\n  # Longpolling (Live Updates, POS)\n  location\
      \ /longpolling {\n    proxy_pass http://odoo_chat;\n  }\n\n  # Static Files\
      \ Caching\n  location ~* /web/static/ {\n    proxy_cache_valid 200 90m;\n  \
      \  proxy_buffering on;\n    expires 864000;\n    proxy_pass http://odoo;\n \
      \ }\n\n  # Root Location\n  location / {\n    proxy_pass http://odoo;\n  }\n\
      }\n"
  - step: 12
    title: Setup SSL with Let's Encrypt
    commands:
    - '{''ubuntu_debian'': ''sudo apt install -y certbot python3-certbot-nginx''}'
    - '{''command'': ''sudo certbot --nginx -d odoo.example.com''}'
  - step: 13
    title: Configure Firewall (UFW)
    commands:
    - '{''enable'': ''sudo ufw enable'', ''allow_ssh'': ''sudo ufw allow 22/tcp'',
      ''allow_http'': ''sudo ufw allow 80/tcp'', ''allow_https'': ''sudo ufw allow
      443/tcp'', ''deny_odoo_direct'': ''sudo ufw deny 8069/tcp'', ''deny_postgresql'':
      ''sudo ufw deny 5432/tcp'', ''status'': ''sudo ufw status verbose''}'
  - step: 14
    title: Tune PostgreSQL for Odoo
    commands:
    - '# Edit /etc/postgresql/15/main/postgresql.conf'
    - '{''shared_buffers'': ''4GB'', ''effective_cache_size'': ''8GB'', ''maintenance_work_mem'':
      ''512MB'', ''work_mem'': ''32MB'', ''wal_buffers'': ''16MB'', ''checkpoint_completion_target'':
      0.9, ''checkpoint_timeout'': ''15min'', ''max_wal_size'': ''2GB'', ''min_wal_size'':
      ''1GB'', ''max_connections'': 150, ''random_page_cost'': 1.1, ''effective_io_concurrency'':
      200, ''default_statistics_target'': 100, ''max_worker_processes'': 8, ''max_parallel_workers_per_gather'':
      4, ''max_parallel_workers'': 8, ''parallel_tuple_cost'': 0.1, ''parallel_setup_cost'':
      1000, ''log_min_duration_statement'': 500, ''log_line_prefix'': ''%t [%p]: [%l-1]
      user=%u,db=%d,app=%a,client=%h '', ''log_checkpoints'': ''on'', ''log_lock_waits'':
      ''on'', ''log_temp_files'': 0, ''autovacuum'': ''on'', ''autovacuum_max_workers'':
      3, ''autovacuum_naptime'': ''30s''}'
  - step: 15
    title: Start Odoo and Enable Auto-Start
    commands:
    - sudo systemctl start odoo
    - sudo systemctl enable odoo
    - sudo systemctl status odoo
  estimated_deployment_time: 30-45 minutes
  skill_level_required: Intermediate (basic Linux command line knowledge)
  common_pitfalls:
  - issue: Exceeding included bandwidth
    solution: Monitor bandwidth usage in control panel, consider higher-tier plans
      with more included bandwidth
  - issue: Snapshots accumulating costs
    solution: Delete old snapshots regularly, implement retention policy
  - issue: Not utilizing VX1 instances
    solution: Migrate to VX1 for 77% better price/performance (2025 latest offering)
  - issue: Manual SSL certificate renewal
    solution: Automate Let's Encrypt renewal with certbot cron job
  common_issues:
  - issue: Odoo won't start after installation
    solution: 'Check logs: sudo journalctl -u odoo -n 50. Common causes: PostgreSQL
      not running, incorrect file permissions, missing Python dependencies.'
  - issue: 502 Bad Gateway from NGINX
    solution: 'Verify Odoo is running on port 8069: sudo netstat -tlnp | grep 8069.
      Check NGINX error log: sudo tail -f /var/log/nginx/error.log'
  - issue: SSL certificate won't install
    solution: Ensure DNS A record points to your server IP. Check firewall allows
      port 80/443.
  security_best_practices:
  - item: Firewall configured (UFW/iptables)
    critical: true
  - item: Fail2ban installed and configured
    critical: true
  - item: SSL/TLS certificate installed (Let's Encrypt)
    critical: true
  - item: PostgreSQL listening on localhost only
    critical: true
  - item: Strong passwords set (Odoo admin, PostgreSQL, OS users)
    critical: true
  - item: SSH key authentication enabled, password auth disabled
    critical: true
  - item: Automated security updates enabled
    critical: true
  - item: Encrypted backups stored offsite
    critical: true
  - item: Odoo list_db = False
    critical: false
  - item: Two-factor authentication enabled for admins
    critical: false
  - item: Log monitoring and alerting configured
    critical: false
  - item: File upload restrictions implemented
    critical: false
  - item: Regular security audits scheduled
    critical: false
  cost_estimate:
    monthly_server_cost: '87.6'
    setup_cost: $0 (DIY deployment)
    ongoing_costs: Domain name (~$12/year), optional backup storage
  alternative_deployment_options:
  - option: Managed Odoo.sh
    pros: Zero maintenance, automatic backups, enterprise support
    cons: Higher cost (~$24/user/month), less control
  - option: Docker deployment on vultr
    pros: Easier updates, containerized isolation
    cons: Slightly more complex initial setup
    link: deploy-odoo-18-docker-vultr
  next_steps:
  - Configure Odoo modules (CRM, Sales, Inventory)
  - Import your data from existing systems
  - 'Set up automated backups (see: odoo-backup-automation)'
  - Configure email sending (SMTP)
  - Add custom domain and branding
ai_generated_content:
  introduction: 'Deploy Odoo 18 on vultr: Complete 2025 Guide requires specific technical
    decisions at every layer—operating system selection, PostgreSQL version and configuration,
    Python environment setup, NGINX reverse proxy implementation, SSL certificate
    management, and systemd service orchestration. This guide makes those decisions
    explicit, explaining the reasoning behind each configuration choice and the production
    implications of alternatives you might encounter.


    Odoo deployments fail most often from accumulated small configuration errors rather
    than single catastrophic mistakes. Installing PostgreSQL without tuning shared_buffers
    creates memory pressure. Configuring NGINX without extended timeouts causes request
    failures. Running Odoo without proper systemd management means manual restarts
    after updates. Each individual mistake seems minor until they compound into production
    instability.'
  conclusion: 'You achieved practical digital sovereignty by deploying Deploy Odoo
    18 on vultr: Complete 2025 Guide on infrastructure you control at $50-100 monthly.
    This system eliminates dependency on managed Odoo hosting providers who lock you
    into proprietary platforms, restrict customization freedom, and increase prices
    arbitrarily because they control your data and operational access. You own your
    Odoo instance, your PostgreSQL database, your backup strategy, and your ability
    to migrate to different infrastructure providers if business requirements or pricing
    changes.


    The sovereignty advantage compounds over time. Your Odoo data exports to standard
    PostgreSQL dump files that restore on any compatible infrastructure—Vultr, competing
    cloud providers, or on-premises hardware. Your configuration exists in documented
    scripts and files you can version control and replicate. Your operational knowledge
    transfers across infrastructure platforms because you understand the underlying
    components rather than provider-specific management interfaces. This portability
    and knowledge ownership protect against vendor lock-in and preserve your ability
    to optimize costs as your business evolves.


    Maintain this sovereignty by documenting your deployment, testing your backups
    quarterly, and staying current with security updates. The infrastructure you built
    today serves business needs for years while remaining under your control—that
    combination of longevity, ownership, and cost efficiency justifies the deployment
    effort and establishes the operational foundation your business deserves.



    Before declaring your deployment complete, run the [backup readiness checker](/toolkit/odoo-backup-readiness-checker/).
    This 60-second assessment validates encryption, tests restoration procedures,
    and confirms off-site storage configuration.'
  troubleshooting_guide: '## Common Issues and Solutions


    **Issue: Odoo service fails to start after installation**


    Check the service status and logs to identify the specific error. Run `systemctl
    status odoo` to see if systemd reports configuration file errors, permission problems,
    or missing dependencies. Most startup failures trace to incorrect paths in the
    configuration file—verify `/etc/odoo/odoo.conf` contains valid paths to the Odoo
    installation directory, addons folders, and log file location. Cloud-specific
    issues often involve security group or firewall rules blocking access. Verify
    your cloud provider''s security groups allow port 8069 inbound traffic. Check
    the instance''s system logs through the cloud console for out-of-memory errors
    or disk space issues. Cloud instances with insufficient RAM (less than 4GB) cannot
    run Odoo reliably—workers crash under load, requiring instance resize.


    **Issue: Database connection errors**


    Odoo cannot connect to PostgreSQL, typically showing "FATAL: password authentication
    failed" or "could not connect to server" errors. Verify PostgreSQL is running
    with `systemctl status postgresql`, confirm the Odoo database user exists with
    correct credentials, and check `pg_hba.conf` allows local connections. The Odoo
    configuration file''s `db_user`, `db_password`, and `db_host` parameters must
    match your PostgreSQL setup exactly—case sensitivity matters for usernames.


    **Issue: Port 8069 not accessible from browser**


    The firewall blocks incoming connections to Odoo''s default port. Cloud providers
    use both network-level security groups and OS-level firewalls. Configure security
    group rules in your cloud console to allow port 8069 from 0.0.0.0/0 (or restrict
    to specific IP ranges). Then configure the OS firewall as described above. Both
    layers must permit traffic for connections to succeed. For production deployments
    behind NGINX reverse proxy, you should block external port 8069 access entirely
    and only expose ports 80/443, which NGINX proxies to Odoo''s localhost:8069.


    **Issue: Module installation fails with dependency errors**


    Odoo modules declare dependencies on other modules, and installation fails if
    dependencies are missing or if circular dependencies exist. Read the error message
    carefully—it specifies which module dependency is missing. Install missing modules
    through the Apps menu first, then retry the original module installation. For
    custom modules, verify the `__manifest__.py` file declares all dependencies in
    the `depends` list.


    **Issue: PDF generation produces blank or malformed documents**


    Cloud instances often use minimal OS images without X11 libraries. Install complete
    wkhtmltopdf dependencies: `apt install -y libxrender1 libfontconfig1 libxext6`
    (Ubuntu) or equivalent for your distribution. Verify fonts are available for PDF
    rendering: `fc-list` should show multiple font families. Missing fonts cause PDFs
    with blank characters or incorrect layout.


    **Issue: Performance degradation with increasing users**


    Cloud instance sizing matters more than on-premises servers. Burstable instances
    (AWS t-series, Azure B-series) accumulate CPU credits during idle periods but
    throttle under sustained load. Monitor CPU credit balance in your cloud console.
    If credits deplete regularly, upgrade to a general-purpose instance type. Enable
    detailed monitoring to identify whether CPU, memory, or disk I/O is the bottleneck.


    **Issue: Backup or restore operations fail**


    Cloud storage integration requires proper IAM permissions and network connectivity.
    Verify the instance can reach S3/Azure Blob/GCS endpoints with `curl` or `wget`.
    Check IAM role attached to the instance has write permissions to your backup bucket.
    For cross-region backups, ensure your bucket policy allows writes from the instance''s
    region. Test backup scripts manually before scheduling automated runs.


    **Issue: SSL certificate errors or mixed content warnings**


    Cloud load balancers can terminate SSL, making NGINX configuration different.
    If using a load balancer for SSL, configure it to forward `X-Forwarded-Proto`
    headers, and set NGINX to trust these headers with `proxy_set_header X-Forwarded-Proto
    $scheme`. Verify the load balancer''s health checks target the correct port and
    path—failed health checks prevent traffic routing.

    '
  deployment_guide: 'The first decision determines your cost structure for the next
    year: which instance type matches your workload without overprovisioning. The
    t3.medium offers 2 vCPUs and 4GB RAM at $30.37 monthly on-demand, suitable for
    businesses with 10-30 users running standard Odoo modules like Sales, CRM, and
    Inventory. If your team exceeds 30 users or you''re deploying manufacturing or
    accounting modules with complex calculations, the m6i.large provides 8GB RAM at
    $89.28 monthly, which prevents the memory-swap thrashing that kills Odoo responsiveness
    under load. The wildcard option is the t4g.medium, an ARM-based Graviton instance
    at $24.30 monthly that delivers identical specs to the t3.medium but costs 20%
    less.


    Launch your chosen instance through Vultr''s console with Ubuntu 24.04 LTS as
    the base image. AWS provides official Ubuntu AMIs updated monthly, eliminating
    the malware-laden AMI risk that plagues community images. During launch configuration,
    create a new key pair for SSH access and download the private key immediately—AWS
    doesn''t store it, and you''ll need it for every future access.


    Security group configuration requires precision, not paranoia. Create a new security
    group with four inbound rules: SSH (port 22) restricted to your office IP address
    or VPN endpoint, HTTP (port 80) and HTTPS (port 443) open to 0.0.0.0/0 for public
    access, and port 8069 open to 0.0.0.0/0 temporarily during initial setup. After
    SSL works, delete the 8069 rule entirely. Many guides leave it open permanently,
    creating an unencrypted access vector that bypasses your HTTPS enforcement.


    Connect via SSH and begin the installation phase. You face a fundamental architecture
    choice: Docker Compose or native installation. Docker Compose offers faster initial
    deployment and easier version upgrades—you change one line in a docker-compose.yml
    file and restart containers. Native installation gives you deeper control over
    Python dependencies and system-level optimizations, plus it avoids the 10-15%
    performance overhead Docker networking layers introduce. For most Vultr deployments,
    native installation makes sense because you''re already managing infrastructure—you''ve
    chosen Vultr over managed hosting precisely to maximize control.


    Install PostgreSQL 16 locally first with apt, then add the Odoo 18 repository,
    install the odoo package, and configure it to bind to localhost only while you
    test functionality.


    The PostgreSQL decision carries operational weight. Self-hosting PostgreSQL on
    the same instance simplifies the architecture and eliminates additional database
    costs, but puts database administration on your team. You''ll handle vacuum operations,
    index optimization, and backup verification yourself. RDS managed PostgreSQL removes
    those responsibilities and adds automated backups with point-in-time recovery,
    but introduces 2-4ms network latency between Odoo and the database that impacts
    report generation and bulk import operations. If your team lacks a database specialist
    and your Odoo instance handles under 100 concurrent users, RDS is the pragmatic
    choice. Launch a db.t3.micro with 20GB storage and enable automated backups with
    a 7-day retention window.


    SSL termination through Let''s Encrypt provides free certificates with automated
    renewal, but requires a reverse proxy. Install Nginx, create a server block that
    proxies requests from port 443 to Odoo''s port 8069, and run Certbot to obtain
    certificates for your domain. The critical configuration detail most guides omit:
    set proxy_read_timeout to 600 seconds in your Nginx server block. Odoo''s module
    installation and large report generation operations can take several minutes,
    and Nginx''s default 60-second timeout kills these requests prematurely, generating
    cryptic "bad gateway" errors.


    AWS-specific optimizations start with EBS volume tuning. Enable EBS optimization
    on your EC2 instance through the console, which dedicates network bandwidth to
    storage traffic and prevents disk I/O from competing with Odoo''s HTTP traffic.
    Attach an IAM role to the instance with CloudWatch agent permissions, install
    the CloudWatch agent, and configure it to stream Odoo''s log files to CloudWatch
    Logs.


    The Reserved Instance decision happens after you validate the deployment. Run
    on-demand pricing for the first month while you confirm the instance size handles
    your actual workload and user count. Once you''ve settled on the right size, purchase
    a one-year reserved instance through the EC2 console—you''ll pay the full year
    upfront or choose monthly payments at a slight premium. The 36% savings compounds
    monthly, totaling $133 annually for a t3.medium reservation.


    The total monthly Vultr cost for a production Odoo 18 deployment runs approximately
    $30-50. This includes compute, storage, and data transfer costs.

    '
conversion_assets:
- component_type: callout-box
  placement_hint: mid_guide
  generated_copy:
    headline: Use the Requirements Calculator
    body: Calculate exact server specs before deployment
    cta_text: Use the Requirements Calculator
    cta_link: /toolkit/odoo-requirements-calculator/
    cta_context: Priority 0.5 link from intelligent linking system
- component_type: callout-box
  placement_hint: post_technical
  generated_copy:
    headline: Use the Hosting Advisor
    body: Vendor-neutral hosting decision framework
    cta_text: Use the Hosting Advisor
    cta_link: /toolkit/odoo-hosting-advisor/
    cta_context: Priority 1 link from intelligent linking system
intelligent_links:
- link_url: /guides/install-odoo-18-centos-9/
  anchor_text: 'Install Odoo 18 on CentOS 9: Complete Guide'
  context: Secure and optimize your installation
  priority: 4
- link_url: /guides/install-odoo-18-fedora/
  anchor_text: 'Install Odoo 18 on Fedora : Complete Guide'
  context: Secure and optimize your installation
  priority: 4
- link_url: /guides/install-odoo-18-on-debian-12/
  anchor_text: 'Install Odoo 18 on Debian 12: Complete 2025 Guide'
  context: Secure and optimize your installation
  priority: 4
- link_url: /guides/install-odoo-18-on-ubuntu-2204/
  anchor_text: 'Install Odoo 18 on Ubuntu 22.04: Complete 2025 Guide'
  context: Secure and optimize your installation
  priority: 4
- link_url: /guides/install-odoo-18-on-ubuntu-2404/
  anchor_text: 'Install Odoo 18 on Ubuntu 24.04: Complete 2025 Guide'
  context: Secure and optimize your installation
  priority: 4
- link_url: /guides/install-odoo-18-rocky-linux/
  anchor_text: 'Install Odoo 18 on Rocky Linux : Complete Guide'
  context: Secure and optimize your installation
  priority: 4
- link_url: /guides/deploy-odoo-18-on-digitalocean/
  anchor_text: Deploy on Digitalocean
  context: Compare with other cloud providers
  priority: 7
- link_url: /guides/deploy-odoo-18-on-hetzner/
  anchor_text: Deploy on Hetzner
  context: Compare with other cloud providers
  priority: 7
visualizations:
- chart_type: mermaid
  placement_hint: after_introduction
  data_context: cloud_deployment workflow visualization
  mermaid_chart_syntax: "flowchart LR\n    Start([Deploy Odoo 18]) --> Provision[Provision\
    \ Instance]\n    Provision --> Firewall[Configure Firewall]\n    Firewall -->\
    \ Install[Install Dependencies]\n    Install --> Deploy[Deploy Odoo]\n    Deploy\
    \ --> SSL[Configure SSL]\n    SSL --> End([Production Ready])\n\n    classDef\
    \ process fill:#f8f9fa,stroke:#6c757d,stroke-width:1px\n    classDef endpoint\
    \ fill:#d4edda,stroke:#28a745,stroke-width:2px\n\n    class Provision,Firewall,Install,Deploy,SSL\
    \ process\n    class Start,End endpoint"
