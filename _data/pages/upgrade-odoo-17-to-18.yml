metadata:
  title: 'Upgrade Odoo 17 to 18: Complete 2025 Migration Guide'
  description: Step-by-step guide to upgrade from Odoo 17 to 18. Includes compatibility
    checks, module updates, breaking changes, and rollback procedures.
  intent_type: practitioner
  page_slug: upgrade-odoo-17-to-18
  draft_metadata:
    template_generated: true
    template_generation_date: '2025-10-28T19:32:29.461987'
static_data:
  source_version: '17.0'
  target_version: '18.0'
  upgrade_path: Direct (17.0 → 18.0)
  upgrade_difficulty: Low to Medium
  key_changes_in_18:
  - Python 3.10+ required (17 supported Python 3.8+)
  - PostgreSQL 12+ required (17 minimum was 10)
  - New website builder features
  - Enhanced Studio capabilities
  - Improved mobile responsiveness
  breaking_changes:
  - change: Python version requirement
    impact: Must upgrade to Python 3.10 or higher before Odoo upgrade
    fix: sudo apt install python3.10 python3.10-dev
  - change: Removed deprecated ORM methods
    impact: Custom modules using old API may break
    fix: Update custom code to use current ORM methods
  - change: Changed JavaScript framework components
    impact: Custom web widgets may need updates
    fix: Review Odoo 18 JavaScript migration guide
  upgrade_steps:
  - step: 1
    name: Pre-Upgrade Assessment
    commands:
    - '# Check current version'
    - odoo-bin --version
    - '# List custom modules'
    - ls /opt/odoo/custom-addons
    - '# Check Python version'
    - python3 --version
  - step: 2
    name: Backup Everything
    commands:
    - '# Database backup'
    - pg_dump odoo17_db > backup_17_to_18_$(date +%Y%m%d).sql
    - '# Filestore backup'
    - tar -czf filestore_17_$(date +%Y%m%d).tar.gz ~/.local/share/Odoo/filestore/
    - '# Custom addons backup'
    - tar -czf custom_addons_17_$(date +%Y%m%d).tar.gz /opt/odoo/custom-addons/
  - step: 3
    name: Install Python 3.10+ (if needed)
    commands:
    - sudo apt update
    - sudo apt install -y python3.10 python3.10-dev python3.10-venv
    - sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10
      1
  - step: 4
    name: Download Odoo 18
    commands:
    - cd /opt
    - sudo git clone https://github.com/odoo/odoo --depth 1 --branch 18.0 odoo-18
    - sudo chown -R odoo:odoo /opt/odoo-18
  - step: 5
    name: Install Odoo 18 Dependencies
    commands:
    - sudo apt install -y python3-pip
    - cd /opt/odoo-18
    - pip3 install -r requirements.txt
  - step: 6
    name: Create Test Database
    commands:
    - createdb odoo18_test
    - psql odoo18_test < backup_17_to_18_$(date +%Y%m%d).sql
  - step: 7
    name: Run Upgrade on Test DB
    commands:
    - /opt/odoo-18/odoo-bin -d odoo18_test -u all --stop-after-init
    - '# Check logs for errors'
    - tail -n 200 /var/log/odoo/odoo-server.log | grep -i error
  - step: 8
    name: Test Critical Functions
    tasks:
    - Create test sale order
    - Generate invoice
    - Process payment
    - Run inventory operation
    - Check reports
    - Test custom modules
  - step: 9
    name: Production Upgrade (if tests pass)
    commands:
    - sudo systemctl stop odoo
    - sudo -u odoo /opt/odoo-18/odoo-bin -d odoo_production -u all --stop-after-init
    - '# Update systemd service to use odoo-18'
    - sudo nano /etc/systemd/system/odoo.service
    - '# Change ExecStart to /opt/odoo-18/odoo-bin'
    - sudo systemctl daemon-reload
    - sudo systemctl start odoo
  module_compatibility:
    core_modules: All Odoo 17 core modules compatible with 18
    community_modules:
      check_required: true
      oca_modules: Check OCA repository for 18.0 branch
      custom_modules: Test individually, update if needed
    apps_store:
      note: Apps from Odoo Apps Store may not have 18.0 version yet
      action: Contact app developer or wait for update
  estimated_downtime:
    small_db: 30 minutes - 1 hour (< 10GB database)
    medium_db: 1-2 hours (10-50GB database)
    large_db: 2-4 hours (50GB+ database)
  rollback_procedure:
  - step: Stop Odoo 18
    command: sudo systemctl stop odoo
  - step: Drop upgraded database
    command: dropdb odoo_production
  - step: Restore Odoo 17 backup
    command: createdb odoo_production && psql odoo_production < backup_17_to_18_*.sql
  - step: Revert systemd service
    command: 'sudo nano /etc/systemd/system/odoo.service  # Change back to /opt/odoo-17'
  - step: Restart Odoo 17
    command: sudo systemctl daemon-reload && sudo systemctl start odoo
  post_upgrade_checklist:
  - Verify all users can login
  - Test payment gateway integrations
  - Check scheduled actions (Settings > Technical > Automation > Scheduled Actions)
  - Validate email server configuration
  - Test external API integrations
  - Review security settings
  common_issues:
  - issue: Module X not compatible with 18
    solution: Disable module temporarily, contact developer
  - issue: Custom reports not rendering
    solution: Update QWeb templates to Odoo 18 syntax
  - issue: Database upgrade errors
    solution: Check /var/log/odoo/odoo-server.log, fix data issues, retry
ai_generated_content:
  introduction: 'Deploying Upgrade Odoo 17 to 18: Complete 2025 Migration Guide doesn''t
    require enterprise budgets or vendor lock-in. Where managed Odoo hosting providers
    charge three hundred to five hundred dollars monthly for comparable infrastructure,
    your cloud provider delivers production-grade virtual machines at $50-100 with
    full root access and complete data ownership.


    Performance under load separates viable production infrastructure from systems
    that collapse during month-end financial closes or customer deadline pressure.
    The specific instance configuration in this guide delivers predictable response
    times even when users simultaneously run complex inventory calculations, generate
    financial statements, and process bulk sales orders.'
  conclusion: 'The Upgrade Odoo 17 to 18: Complete 2025 Migration Guide architecture
    you implemented on your cloud provider provides a scaling foundation that supports
    business growth without infrastructure rebuilds. The current recommended instance
    type configuration handles 10-25 users, but the deployment patterns you followed—separated
    application and database tiers, reverse proxy SSL termination, automated backup
    systems—scale linearly when user counts increase.


    Growth-related infrastructure changes require minimal effort because you built
    on production-grade foundations from the start. Upgrading to a larger instance
    type takes thirty minutes and involves stopping services, resizing the instance
    through your cloud provider''s console, adjusting PostgreSQL parameters for the
    new RAM allocation, and restarting services. Adding a read replica for reporting
    workloads requires similar effort. Implementing high availability with load-balanced
    application servers builds on the NGINX configuration you already deployed. You
    established architectural patterns that accommodate scaling without starting over.


    Your immediate focus should shift to operational excellence. Validate your backup
    restoration process by performing a complete recovery to a test instance. Establish
    monitoring baselines for normal CPU, memory, and disk usage patterns so you can
    identify anomalies before they cause outages. Document configuration decisions
    and administrative procedures for future team members. The infrastructure work
    is complete—operational maturity and application layer optimization represent
    your next leverage points for extracting maximum value from this $50-100 monthly
    infrastructure investment.



    Bookmark this guide, then [subscribe to our troubleshooting newsletter](/subscribe/)
    for solutions to the 47 most common Odoo production issues. Get decision trees,
    diagnostic commands, and tested fixes delivered monthly.'
  troubleshooting_guide: '## Common Issues and Solutions


    **Issue: Odoo service fails to start after installation**


    Check the service status and logs to identify the specific error. Run `systemctl
    status odoo` to see if systemd reports configuration file errors, permission problems,
    or missing dependencies. Most startup failures trace to incorrect paths in the
    configuration file—verify `/etc/odoo/odoo.conf` contains valid paths to the Odoo
    installation directory, addons folders, and log file location. Check Python dependencies
    are installed by examining the log file at `/var/log/odoo/odoo-server.log`. Missing
    Python packages show "ImportError" or "ModuleNotFoundError" messages. Install
    missing packages using pip: `pip3 install package-name`. Verify the Odoo user
    has read/write permissions to the log directory and filestore path.


    **Issue: Database connection errors**


    Odoo cannot connect to PostgreSQL, typically showing "FATAL: password authentication
    failed" or "could not connect to server" errors. Verify PostgreSQL is running
    with `systemctl status postgresql`, confirm the Odoo database user exists with
    correct credentials, and check `pg_hba.conf` allows local connections. The Odoo
    configuration file''s `db_user`, `db_password`, and `db_host` parameters must
    match your PostgreSQL setup exactly—case sensitivity matters for usernames.


    **Issue: Port 8069 not accessible from browser**


    The firewall blocks incoming connections to Odoo''s default port. Use UFW (Ubuntu/Debian)
    or firewalld (CentOS/Rocky Linux) to allow the port. For UFW: `sudo ufw allow
    8069/tcp`. For firewalld: `sudo firewall-cmd --permanent --add-port=8069/tcp &&
    sudo firewall-cmd --reload`. For production deployments behind NGINX reverse proxy,
    you should block external port 8069 access entirely and only expose ports 80/443,
    which NGINX proxies to Odoo''s localhost:8069.


    **Issue: Module installation fails with dependency errors**


    Odoo modules declare dependencies on other modules, and installation fails if
    dependencies are missing or if circular dependencies exist. Read the error message
    carefully—it specifies which module dependency is missing. Install missing modules
    through the Apps menu first, then retry the original module installation. For
    custom modules, verify the `__manifest__.py` file declares all dependencies in
    the `depends` list.


    **Issue: PDF generation produces blank or malformed documents**


    wkhtmltopdf installation issues cause this. Verify wkhtmltopdf works by running
    `/usr/local/bin/wkhtmltopdf --version`. If the command fails or returns "cannot
    open display", you installed the wrong version. Download the patched Qt version
    from wkhtmltopdf.org specifically for your OS distribution. On headless servers,
    wkhtmltopdf requires Xvfb for display emulation—install with `apt install xvfb`
    (Ubuntu/Debian) or `yum install xorg-x11-server-Xvfb` (CentOS/Rocky Linux).


    **Issue: Performance degradation with increasing users**


    PostgreSQL tuning is usually the bottleneck. Check `shared_buffers` in `/etc/postgresql/*/main/postgresql.conf`
    is set to 25% of system RAM. Monitor slow queries with `pg_stat_statements` extension.
    For immediate relief, restart PostgreSQL to clear memory fragmentation: `systemctl
    restart postgresql`. Long-term, add RAM or separate database to dedicated server.


    **Issue: Backup or restore operations fail**


    Check disk space with `df -h`—insufficient space causes silent backup failures.
    Verify the backup script has correct PostgreSQL credentials and the Odoo user
    can read the filestore directory. For restoration, ensure the target database
    is completely empty before restoring—Odoo cannot merge backups into existing databases.
    Use `dropdb` and `createdb` to ensure a clean target.


    **Issue: SSL certificate errors or mixed content warnings**


    Mixed content warnings occur when NGINX properly serves HTTPS but Odoo generates
    HTTP links internally. Set `proxy_mode = True` in `/etc/odoo/odoo.conf` and restart
    Odoo. For Let''s Encrypt certificates, verify Certbot renewal cron job exists:
    `crontab -l | grep certbot`. Test renewal manually with `certbot renew --dry-run`.

    '
  upgrade_guide: 'Upgrading Odoo from version 17 to 18.0 requires careful planning
    and staging environment testing before touching production systems. Odoo version
    upgrades involve database schema changes, module API modifications, and potential
    breaking changes in custom code that demand thorough validation before go-live.


    The upgrade path from 17 to 18.0 represents a major version jump with significant
    framework changes. Odoo 18 introduces new UI patterns, modified ORM methods, and
    restructured standard modules. Database migration scripts transform your existing
    17 data structures into 18.0 format, but custom modules, third-party apps, and
    configuration customizations require manual review and adaptation.


    ## Pre-Upgrade Assessment and Planning


    Begin with comprehensive inventory of your current Odoo installation. Document
    all installed modules including custom developments and third-party apps from
    Odoo Apps Store. List any custom fields added through Odoo Studio, server actions,
    automated actions, and custom reports. This inventory identifies upgrade blockers—modules
    incompatible with 18.0 or customizations requiring code changes.


    Test the upgrade in a staging environment that mirrors production infrastructure.
    Clone your production database, create a separate server instance running Odoo
    18.0, and execute the upgrade process there first. Never upgrade production directly—even
    Odoo''s official upgrade service occasionally encounters edge cases that require
    troubleshooting.


    **Breaking Changes in Odoo 18:**


    - **ORM API changes**: Some model methods changed signatures or behavior. Custom
    code using `write()`, `create()`, or compute methods requires review.

    - **JavaScript framework**: Website and backend JavaScript underwent refactoring.
    Custom JS widgets need updates for new framework.

    - **View inheritance**: Some standard views restructured their XML, potentially
    breaking view xpath-based customizations.

    - **Removed modules**: Check if any installed modules were deprecated between
    v17 and v18 (consult release notes).


    ## Upgrade Execution Methods


    ### Method 1: Odoo Official Upgrade Service (Recommended for Standard Installations)


    Odoo provides a web-based upgrade service at upgrade.odoo.com that handles database
    migration automatically. Upload your database backup (without filestore for faster
    upload), select target version 18.0, and wait for processing. The service returns
    a migrated database typically within hours for small databases, potentially days
    for multi-GB databases with heavy customization.


    Advantages: Handles complex data migrations, tested against thousands of real-world
    databases, includes Odoo''s upgrade scripts for all standard modules. Limitations:
    Custom modules don''t migrate automatically, requires internet connection for
    upload/download, large databases face long processing times.


    ### Method 2: OpenUpgrade Open-Source Alternative


    OpenUpgrade project provides community-maintained upgrade scripts for migrating
    between Odoo versions. Clone the OpenUpgrade repository, checkout the 18.0 branch,
    install dependencies, and run migration against your database copy. OpenUpgrade
    follows Odoo''s upgrade patterns but adds migrations for community modules not
    covered by official service.


    Advantages: Free for all Odoo editions including Community, handles popular community
    modules, provides visibility into migration process. Limitations: Requires technical
    expertise, may lag behind Odoo official releases, limited support for custom modules.


    ### Method 3: Manual Module-by-Module Upgrade


    For heavily customized installations, manual upgrade provides maximum control.
    Install Odoo 18.0 in fresh environment, install modules one by one testing each,
    and migrate data through custom scripts using XML-RPC API or CSV import/export.
    This approach suits situations where custom code significantly deviates from standard
    Odoo.


    ## Post-Upgrade Validation and Testing


    After upgrade completion, systematic validation ensures business operations continue
    correctly:


    **Data Integrity Checks**: Run SQL queries comparing record counts before and
    after upgrade. Customer count, product count, open sales orders, invoice balances—these
    must match exactly. Discrepancies indicate migration errors requiring immediate
    investigation.


    **Business Process Testing**: Execute end-to-end workflows for critical operations:
    create sales order → deliver products → generate invoice → record payment. Test
    procurement workflows, manufacturing orders if using MRP, and financial period
    closing procedures. Upgraded systems sometimes exhibit subtle bugs that only appear
    during specific workflow combinations.


    **Custom Module Verification**: Custom modules require code review for API changes
    between versions. Common API changes between 17 and 18 include modified compute
    method decorators, changed field properties (like `tracking` behavior), and adjusted
    security rule evaluation. Review all Python files in custom modules for deprecation
    warnings. Test all custom functionality thoroughly—scheduled actions, automated
    actions, custom reports, API integrations with external systems.


    **User Acceptance Testing**: Involve power users from each department to validate
    their workflows function correctly. Accounting staff test month-end closing, inventory
    managers verify stock adjustments, sales team confirms quotation generation. Fresh
    perspective often catches issues technical testing misses.


    ## Rollback Planning and Go-Live Strategy


    Maintain ability to roll back to 17 if critical issues emerge post-upgrade. Keep
    the original production server untouched while running upgraded system in parallel.
    Configure parallel system with different domain name or port, allowing side-by-side
    comparison and gradual user migration.


    Schedule upgrade cutover during slow business period—weekend or holiday when transaction
    volume drops and you afford several hours maintenance window. Communicate upgrade
    schedule to all users days in advance, providing fallback procedures if urgent
    access needed during maintenance.


    Execute go-live with cutover checklist:


    1. Perform final production backup immediately before migration start

    2. Enable maintenance mode blocking user access during upgrade

    3. Execute upgrade procedure (official service, OpenUpgrade, or manual)

    4. Run automated validation queries checking data integrity

    5. Test critical business processes manually

    6. Enable user access and monitor for issues

    7. Maintain 17 system in read-only mode for 1 week as safety net


    ## Version-Specific Considerations for 18.0


    Odoo 18 introduces enhanced reporting capabilities, improved mobile responsiveness,
    and optimized database query patterns. After upgrading, explore new features like
    improved kanban views, enhanced search filters, and updated accounting features
    that may replace custom developments.


    Review Odoo 18 release notes for deprecated features. Any custom code relying
    on deprecated functions needs refactoring to use recommended replacements before
    support ends in future versions.


    The upgrade from 17 to 18.0 typically takes 4-8 weeks from initial assessment
    through production cutover for standard installations, potentially 12-16 weeks
    for complex customized systems. Allocate sufficient time for testing—rushing upgrades
    causes production issues that damage business operations and user confidence.

    '
conversion_assets:
- component_type: callout-box
  placement_hint: mid_guide
  generated_copy:
    headline: Free Backup Health Check
    body: Test your backup strategy in 60 seconds
    cta_text: Free Backup Health Check
    cta_link: /toolkit/odoo-backup-readiness-checker/
    cta_context: Priority 1.5 link from intelligent linking system
intelligent_links:
- link_url: /guides/deploy-odoo-18-on-linode/
  anchor_text: Deploy Odoo 18 on Linode
  context: Consider fresh deployment as alternative to upgrade
  priority: 5
visualizations:
- chart_type: mermaid
  placement_hint: after_introduction
  data_context: version_upgrade workflow visualization
  mermaid_chart_syntax: "flowchart TB\n    Start([Current Version]) --> Backup[Full\
    \ Backup]\n    Backup --> Stage[Setup Staging]\n    Stage --> Upgrade[Upgrade\
    \ Modules]\n    Upgrade --> Test{Tests Pass?}\n    Test -->|Yes| Production[Deploy\
    \ Production]\n    Test -->|No| Rollback[Rollback & Fix]\n    Rollback --> Upgrade\n\
    \    Production --> End([Upgraded])\n\n    classDef critical fill:#f8d7da,stroke:#dc3545,stroke-width:2px\n\
    \    classDef process fill:#f8f9fa,stroke:#6c757d,stroke-width:1px\n    classDef\
    \ success fill:#d4edda,stroke:#28a745,stroke-width:2px\n    classDef decision\
    \ fill:#fff3cd,stroke:#ffc107,stroke-width:2px\n\n    class Backup,Rollback critical\n\
    \    class Stage,Upgrade,Production process\n    class Start,End success\n   \
    \ class Test decision"
