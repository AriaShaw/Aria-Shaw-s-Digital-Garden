================================================================================
THE ODOO BACKUP & RESTORE COMMAND VAULT
Complete Script Library from "The Definitive Guide"
Created by Aria Shaw - 2025
================================================================================

TABLE OF CONTENTS
=================

1. Basic Backup Commands
2. Web Interface Backup (cURL/wget)
3. PowerShell Scripts for Windows
4. Manual PostgreSQL Backup
5. Automated Backup Scripts
6. Restore Commands
7. Cloud Storage Integration (AWS S3)
8. Monitoring and Verification
9. Troubleshooting Commands
10. Hidden Features and Advanced Techniques
11. Emergency Recovery Commands
12. Backup Quality Assessment
13. Configuration Templates

================================================================================
1. BASIC BACKUP COMMANDS
================================================================================

# Check database size before backup
sudo -u postgres psql -d your_database -c "SELECT pg_size_pretty(pg_database_size('your_database'));"

# Check filestore size
du -sh /var/lib/odoo/filestore/your_database/

# Check available disk space
df -h /backup/odoo/

# Verify Odoo is running
systemctl status odoo

# Check PostgreSQL connectivity
sudo -u postgres psql -c "SELECT version();"

================================================================================
2. WEB INTERFACE BACKUP (cURL/wget)
================================================================================

# Basic cURL backup command
curl -X POST \
  -F "master_pwd=your_master_password" \
  -F "name=your_database" \
  -F "backup_format=zip" \
  -o "backup_$(date +%Y%m%d_%H%M%S).zip" \
  http://your-odoo-server:8069/web/database/backup

# wget alternative for Linux
wget --post-data="master_pwd=your_master_password&name=your_database&backup_format=zip" \
  --content-disposition \
  -O "backup_$(date +%Y%m%d_%H%M%S).zip" \
  http://your-odoo-server:8069/web/database/backup

# Advanced cURL with timeout and retry
curl -X POST \
  --max-time 3600 \
  --retry 3 \
  --retry-delay 30 \
  -F "master_pwd=your_master_password" \
  -F "name=your_database" \
  -F "backup_format=zip" \
  -o "backup_$(date +%Y%m%d_%H%M%S).zip" \
  http://your-odoo-server:8069/web/database/backup

# HTTPS with SSL verification
curl -X POST \
  --cacert /path/to/ca-certificate.crt \
  -F "master_pwd=your_master_password" \
  -F "name=your_database" \
  -F "backup_format=zip" \
  -o "backup_$(date +%Y%m%d_%H%M%S).zip" \
  https://your-odoo-server/web/database/backup

================================================================================
3. POWERSHELL SCRIPTS FOR WINDOWS
================================================================================

# Basic PowerShell backup script
param(
    [Parameter(Mandatory=$true)]
    [string]$OdooUrl = "http://localhost:8069",
    [Parameter(Mandatory=$true)]
    [string]$MasterPassword,
    [Parameter(Mandatory=$true)]
    [string]$DatabaseName,
    [Parameter(Mandatory=$false)]
    [string]$BackupDir = "C:\Backup\Odoo"
)

# Create backup directory
if (!(Test-Path -Path $BackupDir)) {
    New-Item -ItemType Directory -Path $BackupDir -Force
}

# Generate timestamp
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$backupFile = Join-Path $BackupDir "$DatabaseName_$timestamp.zip"

# Prepare form data
$boundary = [System.Guid]::NewGuid().ToString()
$bodyLines = @(
    "--$boundary",
    'Content-Disposition: form-data; name="master_pwd"',
    '',
    $MasterPassword,
    "--$boundary",
    'Content-Disposition: form-data; name="name"',
    '',
    $DatabaseName,
    "--$boundary",
    'Content-Disposition: form-data; name="backup_format"',
    '',
    'zip',
    "--$boundary--"
)

$body = $bodyLines -join "`r`n"

try {
    # Perform backup
    $response = Invoke-WebRequest -Uri "$OdooUrl/web/database/backup" `
        -Method Post `
        -Body $body `
        -ContentType "multipart/form-data; boundary=$boundary" `
        -OutFile $backupFile `
        -TimeoutSec 3600

    Write-Host "Backup completed successfully: $backupFile"
    Write-Host "File size: $((Get-Item $backupFile).Length / 1MB) MB"
}
catch {
    Write-Error "Backup failed: $($_.Exception.Message)"
}

================================================================================
4. MANUAL POSTGRESQL BACKUP
================================================================================

# Complete database backup
sudo -u postgres pg_dump \
  --host=localhost \
  --port=5432 \
  --username=odoo \
  --format=custom \
  --compress=9 \
  --verbose \
  --file="database_backup_$(date +%Y%m%d_%H%M%S).dump" \
  your_database

# SQL format backup (larger but more compatible)
sudo -u postgres pg_dump \
  --host=localhost \
  --port=5432 \
  --username=odoo \
  --verbose \
  --file="database_backup_$(date +%Y%m%d_%H%M%S).sql" \
  your_database

# Filestore backup
tar -czf "filestore_backup_$(date +%Y%m%d_%H%M%S).tar.gz" \
  -C /var/lib/odoo/filestore \
  your_database

# Combined backup script
#!/bin/bash
DB_NAME="your_database"
BACKUP_DIR="/backup/odoo"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

# Create backup directory
mkdir -p "$BACKUP_DIR"

# Database backup
sudo -u postgres pg_dump \
  --format=custom \
  --compress=9 \
  --file="$BACKUP_DIR/${DB_NAME}_db_${TIMESTAMP}.dump" \
  "$DB_NAME"

# Filestore backup
tar -czf "$BACKUP_DIR/${DB_NAME}_filestore_${TIMESTAMP}.tar.gz" \
  -C /var/lib/odoo/filestore \
  "$DB_NAME"

echo "Backup completed: $BACKUP_DIR"

================================================================================
5. AUTOMATED BACKUP SCRIPTS
================================================================================

# Cron job entries
# Daily backup at 2:30 AM
30 2 * * * /usr/local/bin/odoo_backup.sh production_db >> /var/log/odoo_backup.log 2>&1

# Weekly backup on Sundays at 1:00 AM
0 1 * * 0 /usr/local/bin/weekly_backup.sh >> /var/log/odoo_weekly_backup.log 2>&1

# Monthly backup on 1st day at midnight
0 0 1 * * /usr/local/bin/monthly_backup.sh >> /var/log/odoo_monthly_backup.log 2>&1

# Python backup script with configuration
#!/usr/bin/env python3

import os
import sys
import json
import logging
import subprocess
import datetime
import configparser
from pathlib import Path

def backup_database(db_name, backup_dir):
    timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')

    # Database backup
    db_file = f"{backup_dir}/{db_name}_db_{timestamp}.dump"
    db_cmd = [
        'pg_dump',
        '-h', 'localhost',
        '-p', '5432',
        '-U', 'odoo',
        '--format=custom',
        '--compress=9',
        f'--file={db_file}',
        db_name
    ]

    # Set password environment variable
    env = os.environ.copy()
    env['PGPASSWORD'] = 'your_db_password'

    result = subprocess.run(db_cmd, env=env, capture_output=True, text=True)

    if result.returncode == 0:
        print(f"Backup successful: {db_file}")
        return db_file
    else:
        print(f"Backup failed: {result.stderr}")
        return None

================================================================================
6. RESTORE COMMANDS
================================================================================

# Basic database restore from dump
sudo -u postgres pg_restore \
  --dbname=new_database_name \
  --verbose \
  --clean \
  --if-exists \
  backup_file.dump

# Create new database and restore
sudo -u postgres createdb new_database_name
sudo -u postgres pg_restore \
  --dbname=new_database_name \
  --verbose \
  backup_file.dump

# Restore from SQL file
sudo -u postgres psql -d new_database_name -f backup_file.sql

# Restore filestore
tar -xzf filestore_backup.tar.gz -C /var/lib/odoo/filestore/
chown -R odoo:odoo /var/lib/odoo/filestore/new_database_name

# Complete restore script
#!/bin/bash
BACKUP_FILE="$1"
NEW_DB_NAME="$2"
FILESTORE_BACKUP="$3"

# Create new database
sudo -u postgres createdb "$NEW_DB_NAME"

# Restore database
sudo -u postgres pg_restore \
  --dbname="$NEW_DB_NAME" \
  --verbose \
  --clean \
  --if-exists \
  "$BACKUP_FILE"

# Restore filestore
if [ -f "$FILESTORE_BACKUP" ]; then
    mkdir -p "/var/lib/odoo/filestore/$NEW_DB_NAME"
    tar -xzf "$FILESTORE_BACKUP" -C "/var/lib/odoo/filestore/"
    chown -R odoo:odoo "/var/lib/odoo/filestore/$NEW_DB_NAME"
fi

echo "Restore completed: $NEW_DB_NAME"

# Web interface restore (cURL)
curl -X POST \
  -F "master_pwd=your_master_password" \
  -F "name=new_database_name" \
  -F "backup_file=@backup_file.zip" \
  -F "copy=true" \
  http://your-odoo-server:8069/web/database/restore

================================================================================
7. CLOUD STORAGE INTEGRATION (AWS S3)
================================================================================

# AWS CLI S3 upload
aws s3 cp backup_file.zip s3://your-backup-bucket/odoo-backups/$(date +%Y/%m/%d)/

# S3 lifecycle policy JSON
{
  "Rules": [
    {
      "ID": "OdooBackupLifecycle",
      "Status": "Enabled",
      "Filter": {"Prefix": "odoo-backups/"},
      "Transitions": [
        {"Days": 30, "StorageClass": "STANDARD_IA"},
        {"Days": 90, "StorageClass": "GLACIER"}
      ],
      "Expiration": {"Days": 2555}
    }
  ]
}

# Apply lifecycle policy
aws s3api put-bucket-lifecycle-configuration \
  --bucket your-backup-bucket \
  --lifecycle-configuration file://lifecycle-policy.json

# Python S3 upload script
import boto3
from botocore.exceptions import ClientError

def upload_to_s3(file_path, bucket, s3_key):
    s3_client = boto3.client('s3')
    try:
        s3_client.upload_file(file_path, bucket, s3_key)
        print(f"Upload successful: s3://{bucket}/{s3_key}")
        return True
    except ClientError as e:
        print(f"Upload failed: {e}")
        return False

# S3 backup verification
aws s3 ls s3://your-backup-bucket/odoo-backups/ --recursive | tail -10

================================================================================
8. MONITORING AND VERIFICATION
================================================================================

# Check backup file integrity
unzip -t backup_file.zip

# Verify manifest.json
unzip -p backup_file.zip manifest.json | python3 -c "import json, sys; json.load(sys.stdin)"

# Check database dump integrity
pg_restore --list backup_file.dump > /dev/null

# Monitor backup process
tail -f /var/log/odoo/odoo.log | grep -E "(backup|restore)"

# Check backup file size
ls -lh backup_file.zip
stat -c%s backup_file.zip

# Backup verification script
#!/bin/bash
BACKUP_FILE="$1"

echo "Verifying backup: $BACKUP_FILE"

# Check file exists and has reasonable size
if [ ! -f "$BACKUP_FILE" ]; then
    echo "ERROR: Backup file not found"
    exit 1
fi

SIZE=$(stat -c%s "$BACKUP_FILE")
if [ "$SIZE" -lt 1048576 ]; then  # Less than 1MB
    echo "WARNING: Backup file seems too small"
fi

# Test ZIP integrity
if unzip -t "$BACKUP_FILE" >/dev/null 2>&1; then
    echo "✓ ZIP file integrity OK"
else
    echo "✗ ZIP file corrupted"
    exit 1
fi

# Check manifest
if unzip -p "$BACKUP_FILE" manifest.json | python3 -c "import json, sys; json.load(sys.stdin)" 2>/dev/null; then
    echo "✓ Manifest file valid"
else
    echo "✗ Manifest file invalid"
fi

echo "Backup verification completed"

================================================================================
9. TROUBLESHOOTING COMMANDS
================================================================================

# Check master password configuration
grep -n "admin_passwd\|master_passwd" /etc/odoo/odoo.conf

# Find Odoo configuration file
ps aux | grep odoo | grep -o '\-c [^ ]*' | cut -d' ' -f2

# Check Odoo process and ports
ps aux | grep odoo
netstat -tlnp | grep -E ':8069|:5432'

# Check database connectivity
sudo -u postgres psql -c "\l"

# Check filestore permissions
ls -la /var/lib/odoo/filestore/
sudo -u odoo ls /var/lib/odoo/filestore/your_database/

# Fix common permission issues
sudo chown -R odoo:odoo /var/lib/odoo/filestore/
sudo chmod -R 755 /var/lib/odoo/filestore/

# Check PostgreSQL connections
sudo -u postgres psql -c "SELECT count(*) FROM pg_stat_activity;"

# Find large tables
sudo -u postgres psql -d your_database -c "
SELECT schemaname, tablename,
       pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size
FROM pg_tables
ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC
LIMIT 10;"

# Check database bloat
sudo -u postgres psql -d your_database -c "
SELECT schemaname, tablename, attname, n_distinct, correlation
FROM pg_stats
WHERE schemaname = 'public'
ORDER BY n_distinct DESC
LIMIT 10;"

================================================================================
10. HIDDEN FEATURES AND ADVANCED TECHNIQUES
================================================================================

# Access backup history API
python3 << 'EOF'
# Run in Odoo shell
backup_history = self.env['ir.config_parameter'].search([
    ('key', 'like', 'database.backup.%')
])
for param in backup_history:
    print(f"Operation: {param.key}")
    print(f"Timestamp: {param.value}")
EOF

# Filtered backup (exclude logs)
sudo -u postgres pg_dump \
  --exclude-table=mail_message \
  --exclude-table=mail_tracking_value \
  --exclude-table=ir_logging \
  --exclude-table=bus_presence \
  your_database > filtered_backup.sql

# Hot backup without downtime
sudo -u postgres pg_basebackup \
  -D /backup/odoo/hot_backup_$(date +%Y%m%d_%H%M%S) \
  -Ft -z -P -W

# Filestore deduplication
python3 << 'EOF'
import hashlib
from pathlib import Path

def deduplicate_filestore(filestore_path):
    seen_hashes = {}
    duplicates_found = 0
    space_saved = 0

    for file_path in Path(filestore_path).rglob('*'):
        if file_path.is_file():
            with open(file_path, 'rb') as f:
                file_hash = hashlib.sha256(f.read()).hexdigest()

            if file_hash in seen_hashes:
                original_size = file_path.stat().st_size
                file_path.unlink()
                file_path.symlink_to(seen_hashes[file_hash])
                duplicates_found += 1
                space_saved += original_size
            else:
                seen_hashes[file_hash] = file_path

    print(f"Deduplicated {duplicates_found} files")
    print(f"Space saved: {space_saved / 1024 / 1024:.2f} MB")

deduplicate_filestore('/var/lib/odoo/filestore/your_database')
EOF

# Backup size prediction
python3 << 'EOF'
import subprocess

def predict_backup_size(database_name):
    # Get database size
    result = subprocess.run([
        'sudo', '-u', 'postgres', 'psql', '-d', database_name,
        '-t', '-c', f"SELECT pg_database_size('{database_name}')"
    ], capture_output=True, text=True)

    db_size = int(result.stdout.strip())

    # Get filestore size
    result = subprocess.run([
        'du', '-sb', f'/var/lib/odoo/filestore/{database_name}'
    ], capture_output=True, text=True)

    fs_size = int(result.stdout.split()[0]) if result.returncode == 0 else 0

    # Estimate compression
    estimated_size = (db_size * 0.3) + (fs_size * 0.8)

    print(f"Database: {db_size / 1024 / 1024:.1f} MB")
    print(f"Filestore: {fs_size / 1024 / 1024:.1f} MB")
    print(f"Estimated backup: {estimated_size / 1024 / 1024:.1f} MB")

predict_backup_size('your_database')
EOF

================================================================================
11. EMERGENCY RECOVERY COMMANDS
================================================================================

# Emergency fast restore
#!/bin/bash
BACKUP_FILE="$1"
NEW_DB_NAME="emergency_restore_$(date +%H%M%S)"

echo "🚨 EMERGENCY RESTORE INITIATED"

# Parallel extraction
unzip -j "$BACKUP_FILE" dump.sql -d /tmp/ &
unzip "$BACKUP_FILE" 'filestore/*' -d /tmp/ &
wait

# Fast database creation
sudo -u postgres createdb "$NEW_DB_NAME"

# Temporarily disable safety features
sudo -u postgres psql -d "$NEW_DB_NAME" -c "
  ALTER SYSTEM SET fsync = off;
  ALTER SYSTEM SET synchronous_commit = off;
  SELECT pg_reload_conf();
"

# Parallel restore
sudo -u postgres pg_restore \
  --dbname="$NEW_DB_NAME" \
  --jobs=4 \
  --no-owner \
  --no-privileges \
  /tmp/dump.sql

# Restore filestore
mkdir -p "/var/lib/odoo/filestore/$NEW_DB_NAME"
mv /tmp/filestore/* "/var/lib/odoo/filestore/$NEW_DB_NAME/"
chown -R odoo:odoo "/var/lib/odoo/filestore/$NEW_DB_NAME"

# Re-enable safety features
sudo -u postgres psql -d "$NEW_DB_NAME" -c "
  ALTER SYSTEM RESET fsync;
  ALTER SYSTEM RESET synchronous_commit;
  SELECT pg_reload_conf();
"

echo "✅ Emergency restore complete: $NEW_DB_NAME"

# Backup repair toolkit
repair_corrupted_backup() {
    local backup_file="$1"
    local repair_dir="/tmp/backup_repair_$(date +%s)"

    mkdir -p "$repair_dir"
    cd "$repair_dir"

    # Extract what we can
    unzip -j "$backup_file" 2>/dev/null || echo "Partial extraction"

    # Repair database dump
    if [ -f "dump.sql" ]; then
        sed -i '/ERROR:/d' dump.sql
        sed -i '/WARNING:/d' dump.sql
    fi

    # Reconstruct manifest
    if [ ! -f "manifest.json" ]; then
        cat > manifest.json << EOF
{
  "odoo_version": "unknown",
  "version_info": [16, 0, 0, "final", 0],
  "timestamp": "$(date -Iseconds)",
  "modules": [],
  "pg_version": "unknown"
}
EOF
    fi

    # Repackage
    zip -r "${backup_file%.zip}_repaired.zip" .
    rm -rf "$repair_dir"
}

================================================================================
12. BACKUP QUALITY ASSESSMENT
================================================================================

# Quick backup health check
backup_health_check() {
    local backup_file="$1"

    echo "Backup Health Check: $backup_file"
    echo "================================"

    # File existence and size
    if [ -f "$backup_file" ]; then
        size=$(stat -c%s "$backup_file")
        echo "✓ File exists ($(($size / 1024 / 1024)) MB)"
    else
        echo "✗ File not found"
        return 1
    fi

    # ZIP integrity
    if unzip -t "$backup_file" >/dev/null 2>&1; then
        echo "✓ ZIP integrity OK"
    else
        echo "✗ ZIP corrupted"
    fi

    # Manifest validation
    if unzip -p "$backup_file" manifest.json 2>/dev/null | python3 -c "import json, sys; json.load(sys.stdin)" 2>/dev/null; then
        echo "✓ Manifest valid"
    else
        echo "✗ Manifest invalid"
    fi

    # Content check
    files=$(unzip -l "$backup_file" | wc -l)
    echo "✓ Contains $files files"

    echo "Health check completed"
}

# Database consistency check
sudo -u postgres psql -d your_database -c "
SELECT pid, now() - pg_stat_activity.query_start AS duration, query
FROM pg_stat_activity
WHERE (now() - pg_stat_activity.query_start) > interval '5 minutes';"

# Filestore consistency check
find /var/lib/odoo/filestore/your_database/ -type l -exec test ! -e {} \; -print

================================================================================
13. CONFIGURATION TEMPLATES
================================================================================

# Odoo configuration for backups
[options]
admin_passwd = your_secure_master_password
data_dir = /var/lib/odoo
backup_dir = /backup/odoo
filestore_deduplicate = True
limit_memory_hard = 2684354560
limit_time_cpu = 600
limit_time_real = 1200

# Cron configuration
# /etc/cron.d/odoo-backup
SHELL=/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# Daily backup
30 2 * * * odoo /usr/local/bin/odoo_backup.sh production_db
# Weekly backup
0 1 * * 0 odoo /usr/local/bin/weekly_backup.sh
# Monthly cleanup
0 0 1 * * odoo /usr/local/bin/cleanup_old_backups.sh

# Nginx configuration for large backups
server {
    location /web/database/backup {
        proxy_pass http://odoo;
        client_max_body_size 10G;
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
    }
}

# PostgreSQL optimization for backups
# postgresql.conf
max_parallel_workers = 8
max_parallel_workers_per_gather = 4
checkpoint_timeout = 15min
checkpoint_completion_target = 0.9
wal_buffers = 16MB

# Systemd service for backup monitoring
[Unit]
Description=Odoo Backup Monitor
After=network.target

[Service]
Type=simple
User=odoo
ExecStart=/usr/local/bin/backup_monitor.sh
Restart=always
RestartSec=60

[Install]
WantedBy=multi-user.target

================================================================================
END OF COMMAND VAULT
================================================================================

This command vault contains all the essential commands and scripts from
"The Definitive Guide to Odoo Database Backup and Restore" by Aria Shaw.

For updates and additional resources:
- Website: https://ariashaw.github.io
- Twitter: @theAriaShaw

Remember: Always test backup and restore procedures in a staging environment
before implementing in production.

The best backup is the one that works when you need it most. 🛡️

Last updated: September 2025